
*&---------------------------------------------------------------------*
*& Report  Y90_MIGO_ACCOUNT_REPORT
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT Y90_MIGO_ACCOUNT_REPORT.

TABLES : EKKO, EKPO, EKBE, EKET, MAKT , RSEG, T023T, MSEG.

TYPE-POOLS: SLIS.

DATA: G_REPID             LIKE SY-REPID,
      GS_PRINT            TYPE SLIS_PRINT_ALV,
      GT_LIST_TOP_OF_PAGE TYPE SLIS_T_LISTHEADER,
      GT_EVENTS           TYPE SLIS_T_EVENT,
      GT_SORT             TYPE SLIS_T_SORTINFO_ALV,
      GS_LAYOUT           TYPE SLIS_LAYOUT_ALV,
      GT_FIELDCAT         TYPE SLIS_T_FIELDCAT_ALV,
      GT_VARIANT          LIKE DISVARIANT,
      FIELDCAT_LN         LIKE LINE OF GT_FIELDCAT,
      COL_POS             TYPE I.

DATA   VENCL        TYPE J_1IMOVEND-VEN_CLASS.

TYPES : BEGIN OF TY_EKKO,
        EBELN LIKE EKKO-EBELN, "PO NUMBER
        BEDAT LIKE EKKO-BEDAT,
        BSART LIKE EKKO-BSART,
        END OF TY_EKKO.

DATA:  IT_EKKO TYPE STANDARD TABLE OF TY_EKKO,
       WA_EKKO TYPE TY_EKKO.

TYPES :   BEGIN OF TY_EKPO,
            EBELN   LIKE EKPO-EBELN, "PO NUMBER
            EBELP   LIKE EKPO-EBELP, " ITEM NUMBER
            LOEKZ   LIKE EKPO-LOEKZ,
            MATNR   LIKE EKPO-MATNR, " MATERIAL NUMBER
            WERKS   LIKE EKPO-WERKS, " PLANT
            MENGE   LIKE EKPO-MENGE, " PO QUANTITY
            MEINS   LIKE EKPO-MEINS,  " PO ORDER UNIT
            NETWR   LIKE EKPO-NETWR, " NET PO AMT
          END OF TY_EKPO.

DATA: IT_EKPO TYPE STANDARD TABLE OF TY_EKPO,
      WA_EKPO TYPE TY_EKPO.

TYPES : BEGIN OF TY_EKBE,
          EBELN LIKE EKBE-EBELN,
          EBELP LIKE EKBE-EBELP,
          ZEKKN LIKE EKBE-ZEKKN,
          VGABE LIKE EKBE-VGABE,
          GJAHR LIKE EKBE-GJAHR,
          BELNR LIKE EKBE-BELNR,
          BUZEI LIKE EKBE-BUZEI,
          BEWTP LIKE EKBE-BEWTP,
          ELIKZ LIKE EKBE-ELIKZ,
          MENGE LIKE EKBE-MENGE,
          MATNR LIKE EKBE-MATNR,
          LFBNR LIKE EKBE-LFBNR,
          BWART LIKE EKBE-BWART,
          LSMEH LIKE EKBE-LSMEH,
          END OF TY_EKBE.

DATA: IT_EKBE TYPE STANDARD TABLE OF TY_EKBE,
      WA_EKBE TYPE TY_EKBE.

TYPES : BEGIN OF TY_EKBE2,
          EBELN LIKE EKBE-EBELN,
          EBELP LIKE EKBE-EBELP,
          ZEKKN LIKE EKBE-ZEKKN,
          VGABE LIKE EKBE-VGABE,
          GJAHR LIKE EKBE-GJAHR,
          BELNR LIKE EKBE-BELNR,
          BUZEI LIKE EKBE-BUZEI,
          BEWTP LIKE EKBE-BEWTP,
          ELIKZ LIKE EKBE-ELIKZ,
          MENGE LIKE EKBE-MENGE,
          MATNR LIKE EKBE-MATNR,
          LFBNR LIKE EKBE-LFBNR,
          BWART LIKE EKBE-BWART,
          END OF TY_EKBE2.

DATA: IT_EKBE2 TYPE STANDARD TABLE OF TY_EKBE2,
      WA_EKBE2 TYPE TY_EKBE2.

TYPES : BEGIN OF TY_EKBE1,
          EBELN LIKE EKBE-EBELN,
          EBELP LIKE EKBE-EBELP,
          ZEKKN LIKE EKBE-ZEKKN,
          VGABE LIKE EKBE-VGABE,
          GJAHR LIKE EKBE-GJAHR,
          BELNR LIKE EKBE-BELNR,
          BUZEI LIKE EKBE-BUZEI,
          BEWTP LIKE EKBE-BEWTP,
          ELIKZ LIKE EKBE-ELIKZ,
          MENGE LIKE EKBE-MENGE,
          MATNR LIKE EKBE-MATNR,
          LFBNR LIKE EKBE-LFBNR,
          END OF TY_EKBE1.

DATA: IT_EKBE1 TYPE STANDARD TABLE OF TY_EKBE1,
      WA_EKBE1 TYPE TY_EKBE1.

DATA : MENGE    LIKE MSEG-MENGE.
DATA : MENGE1   LIKE MSEG-MENGE.
DATA : PENDING_QTY LIKE RSEG-MENGE,
       GR_QTY       LIKE RSEG-MENGE.

TYPES : BEGIN OF TY_FIN,
          EBELN        LIKE EKKO-EBELN, "PO NUMBER
          BEDAT        LIKE EKKO-BEDAT,
          BELNR        LIKE EKBE-BELNR,
          EBELP        LIKE EKPO-EBELP, " ITEM NUMBER
          MATNR        LIKE EKPO-MATNR, " MATERIAL NUMBER
          MENGE        LIKE EKPO-MENGE, " PO QUANTITY
          MAKTX        LIKE MAKT-MAKTX,
          PENDING_QTY  LIKE RSEG-MENGE,
          LFBNR        LIKE EKBE-LFBNR,
          BSART        LIKE EKKO-BSART,
          LSMEH        LIKE EKBE-LSMEH,
        END OF TY_FIN.

DATA: IT_FIN TYPE STANDARD TABLE OF TY_FIN,
      WA_FIN TYPE TY_FIN.

INITIALIZATION.
  G_REPID = SY-REPID.

  SELECTION-SCREEN SKIP 1.
  SELECTION-SCREEN BEGIN OF BLOCK V-1 WITH FRAME TITLE TEXT-025.
  SELECT-OPTIONS:
  BUKRS   FOR EKKO-BUKRS DEFAULT '1000',
  VENDOR  FOR EKKO-LIFNR, " VENDOR NUMBER
  PLANT   FOR EKPO-WERKS DEFAULT '1000', " PLANT
  MATNR   FOR EKPO-MATNR, " MATERIAL
  DOC_DT  FOR EKKO-BEDAT OBLIGATORY, " POSTING DATE
  S_EBELN FOR EKKO-EBELN.
  SELECTION-SCREEN SKIP 1.
  SELECTION-SCREEN END OF BLOCK V-1.
  SELECTION-SCREEN SKIP 1.

START-OF-SELECTION.

  PERFORM DATA.
  PERFORM BUILD.
  PERFORM EVENTTAB_BUILD CHANGING GT_EVENTS.
  PERFORM CALL_ALV.

FORM DATA.

  SELECT EBELN
         BEDAT
         BSART
         FROM  EKKO INTO TABLE IT_EKKO
         WHERE LIFNR IN VENDOR AND BEDAT IN DOC_DT AND EBELN IN S_EBELN AND BUKRS IN BUKRS
         AND ( BSART EQ 'ZGP' OR BSART EQ 'ZSER' OR BSART EQ 'NB' ).

  IF SY-SUBRC EQ 0.
    SORT IT_EKKO BY EBELN.
  ENDIF.

  IF IT_EKKO IS NOT INITIAL.
    SELECT  EBELN
            EBELP
            LOEKZ
            MATNR
            WERKS
            MENGE
            MEINS
            NETWR
      FROM EKPO INTO TABLE IT_EKPO FOR ALL ENTRIES IN IT_EKKO
                                       WHERE EBELN = IT_EKKO-EBELN
                                         AND LOEKZ NE 'L'
                                         AND WERKS IN PLANT
                                         AND MATNR IN MATNR.

    IF SY-SUBRC EQ 0.
      SORT IT_EKPO BY EBELN EBELP.
    ENDIF.
  ENDIF.

 IF NOT IT_EKPO IS INITIAL.
 SELECT EBELN
        EBELP
        ZEKKN
        VGABE
        GJAHR
        BELNR
        BUZEI
        BEWTP
        ELIKZ
        MENGE
        MATNR
        LFBNR
        BWART
        LSMEH FROM EKBE INTO TABLE IT_EKBE FOR ALL ENTRIES IN IT_EKPO
                                       WHERE EBELN = IT_EKPO-EBELN
                                        AND  EBELP = IT_EKPO-EBELP
                                        AND  BEWTP EQ 'E'
                                        AND  BWART EQ '101'.
*                                        AND  ELIKZ NE 'X'.
  ENDIF.

 IF IT_EKBE IS NOT INITIAL.
 SELECT EBELN
        EBELP
        ZEKKN
        VGABE
        GJAHR
        BELNR
        BUZEI
        BEWTP
        ELIKZ
        MENGE
        MATNR
        LFBNR FROM EKBE INTO TABLE IT_EKBE2 FOR ALL ENTRIES IN IT_EKBE
                                       WHERE EBELN = IT_EKBE-EBELN
                                        AND  EBELP = IT_EKBE-EBELP
                                        AND  LFBNR = IT_EKBE-LFBNR
                                        AND  BWART EQ '102'
                                        AND  BEWTP EQ 'E'.

 SELECT EBELN
        EBELP
        ZEKKN
        VGABE
        GJAHR
        BELNR
        BUZEI
        BEWTP
        ELIKZ
        MENGE
        MATNR
        LFBNR FROM EKBE INTO TABLE IT_EKBE1 FOR ALL ENTRIES IN IT_EKBE
                                       WHERE EBELN = IT_EKBE-EBELN
                                        AND  EBELP = IT_EKBE-EBELP
                                        AND  LFBNR = IT_EKBE-LFBNR
                                        AND ( BEWTP EQ 'Q' OR BEWTP EQ 'T' ).
 ENDIF.

 LOOP AT IT_EKBE1 INTO WA_EKBE1.

 READ TABLE IT_EKBE INTO WA_EKBE WITH KEY EBELN = WA_EKBE1-EBELN
                                          EBELP = WA_EKBE1-EBELP
                                          LFBNR = WA_EKBE1-LFBNR.
 IF SY-SUBRC EQ 0.
 DELETE IT_EKBE INDEX sy-tabix.
 ENDIF.

 ENDLOOP.

 LOOP AT IT_EKBE2 INTO WA_EKBE2.

 READ TABLE IT_EKBE INTO WA_EKBE WITH KEY EBELN = WA_EKBE2-EBELN
                                          EBELP = WA_EKBE2-EBELP
                                          LFBNR = WA_EKBE2-LFBNR.
 IF SY-SUBRC EQ 0.
 DELETE IT_EKBE INDEX sy-tabix.
 ENDIF.

 ENDLOOP.

LOOP AT IT_EKBE INTO WA_EKBE." WHERE EBELN = WA_EKPO-EBELN AND EBELP = WA_EKPO-EBELP.
WA_FIN-EBELN = WA_EKBE-EBELN.
WA_FIN-EBELP = WA_EKBE-EBELP.
WA_FIN-MENGE = WA_EKBE-MENGE.
WA_FIN-BELNR = WA_EKBE-BELNR.
WA_FIN-MATNR = WA_EKBE-MATNR.
WA_FIN-LFBNR = WA_EKBE-LFBNR.
WA_FIN-LSMEH = WA_EKBE-LSMEH.
CLEAR WA_EKKO.
READ TABLE IT_EKKO INTO WA_EKKO WITH KEY EBELN = WA_EKBE-EBELN.
WA_FIN-BEDAT = WA_EKKO-BEDAT.

SELECT SINGLE MAKTX FROM MAKT INTO MAKT-MAKTX WHERE MATNR = WA_EKBE-MATNR.
WA_FIN-MAKTX = MAKT-MAKTX.
APPEND WA_FIN TO IT_FIN.
CLEAR : WA_FIN, MAKT-MAKTX.
ENDLOOP.

ENDFORM.

AT LINE-SELECTION.
  SET PARAMETER ID 'BES' FIELD WA_FIN-EBELN.
  CALL TRANSACTION 'ME23N' AND SKIP FIRST SCREEN.

END-OF-SELECTION.

FORM BUILD .
  DATA: FIELDCAT_IN TYPE SLIS_FIELDCAT_ALV.
  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'EBELN'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'PO NUMBER'.
  FIELDCAT_LN-HOTSPOT = 'X'.
  FIELDCAT_LN-OUTPUTLEN = 10.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'EBELP'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'PO ITEM'.
  FIELDCAT_LN-OUTPUTLEN = 10.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'BEDAT'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-HOTSPOT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'PO DATE'.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'MATNR'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'MAT NUMBER'.
  FIELDCAT_LN-OUTPUTLEN = 10.
  FIELDCAT_LN-NO_ZERO = 'X'.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'MAKTX'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'MAT DESCRIPTION'.
  FIELDCAT_LN-OUTPUTLEN = 20.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'MENGE'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'QTY'.
  FIELDCAT_LN-OUTPUTLEN = 10.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'LSMEH'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'UNIT'.
  FIELDCAT_LN-OUTPUTLEN = 10.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'BELNR'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'MAT DOCUMENT'.
  FIELDCAT_LN-OUTPUTLEN = 10.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  DATA: GS_SORT TYPE SLIS_SORTINFO_ALV.
  CLEAR GS_SORT.
  GS_SORT-FIELDNAME = 'EBELN'.
  GS_SORT-UP = 'X'.
  APPEND GS_SORT TO GT_SORT.
  CLEAR GS_SORT.
  GS_SORT-FIELDNAME = 'LIFNR'.
  GS_SORT-UP = 'X'.
  APPEND GS_SORT TO GT_SORT.
ENDFORM. "BUILD


*&--------------------------------------------------------------------*
FORM CALL_ALV.
* ABAP ALV GRID LIST VIEWER
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      I_CALLBACK_PROGRAM      = G_REPID
      I_CALLBACK_USER_COMMAND = 'FRM_ALV_USER_COMMAND'
*      I_CALLBACK_TOP_OF_PAGE  = 'TOP_OF_PAGE'
      I_STRUCTURE_NAME        = 'IT_FIN'
      IS_LAYOUT               = GS_LAYOUT
      IT_FIELDCAT             = GT_FIELDCAT[]
      I_DEFAULT               = 'X'
      I_SAVE                  = 'A'
      IS_VARIANT              = GT_VARIANT
    TABLES
      T_OUTTAB                = IT_FIN.
ENDFORM. "CALL_ALV
*&--------------------------------------------------------------------*
*& FORM EVENTTAB_BUILD
*&--------------------------------------------------------------------*
* HEADER FORM
FORM EVENTTAB_BUILD CHANGING LT_EVENTS TYPE SLIS_T_EVENT.
  CONSTANTS:
    GC_FORMNAME_TOP_OF_PAGE TYPE SLIS_FORMNAME VALUE 'TOP_OF_PAGE'.
  DATA: LS_EVENT TYPE SLIS_ALV_EVENT.
  CALL FUNCTION 'REUSE_ALV_EVENTS_GET'
    EXPORTING
      I_LIST_TYPE = 0
    IMPORTING
      ET_EVENTS   = LT_EVENTS.
  READ TABLE LT_EVENTS WITH KEY NAME = SLIS_EV_TOP_OF_PAGE
    INTO LS_EVENT.
  IF SY-SUBRC = 0.
    MOVE GC_FORMNAME_TOP_OF_PAGE TO LS_EVENT-FORM.
    APPEND LS_EVENT TO LT_EVENTS.
  ENDIF.
ENDFORM. "EVENTTAB_BUILD
*&--------------------------------------------------------------------*

*&--------------------------------------------------------------------*
*& FORM FRM_ALV_USER_COMMAND
*&--------------------------------------------------------------------*
FORM FRM_ALV_USER_COMMAND USING UCOMM LIKE SY-UCOMM
SELFIELD TYPE SLIS_SELFIELD.
  CASE UCOMM.
    WHEN '&IC1'.
      IF SELFIELD-TABNAME = 'IT_FIN'.
        IF SELFIELD-FIELDNAME = 'EBELN'.
          READ TABLE IT_FIN INTO WA_FIN INDEX SELFIELD-TABINDEX.
          IF SY-SUBRC = 0.
            SET PARAMETER ID 'BES' FIELD WA_FIN-EBELN.
            CALL TRANSACTION 'ME23N' AND SKIP FIRST SCREEN.
          ENDIF.
        ENDIF.
      ENDIF.
  ENDCASE.
ENDFORM. "FRM_ALV_USER_COMMAND

