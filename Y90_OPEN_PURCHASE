REPORT Y90_OPEN_PURCHASE.
* Developed by MILLY SHARMA

TABLES : EKKO, EKPO, EKBE, EKET, LFA1, KONP , MAKT , MBEW, KONV, RSEG, T023T, MSEG.
*FOR ALV DISPLAY
TYPE-POOLS: SLIS.

DATA: G_REPID             LIKE SY-REPID,
      GS_PRINT            TYPE SLIS_PRINT_ALV,
      GT_LIST_TOP_OF_PAGE TYPE SLIS_T_LISTHEADER,
      GT_EVENTS           TYPE SLIS_T_EVENT,
      GT_SORT             TYPE SLIS_T_SORTINFO_ALV,
      GS_LAYOUT           TYPE SLIS_LAYOUT_ALV,
      GT_FIELDCAT         TYPE SLIS_T_FIELDCAT_ALV,
      GT_VARIANT          LIKE DISVARIANT,
      FIELDCAT_LN         LIKE LINE OF GT_FIELDCAT,
      COL_POS             TYPE I.

DATA   VENCL        TYPE J_1IMOVEND-VEN_CLASS.

TYPES :   BEGIN OF TY_EKKO,
            EBELN LIKE EKKO-EBELN, "PO NUMBER
            BEDAT LIKE EKKO-BEDAT,
            EKORG LIKE EKKO-EKORG, " PUR ORG
            EKGRP LIKE EKKO-EKGRP, " PUR GROUP
            LIFNR LIKE EKKO-LIFNR, "VENDOR NUMBER
            BSART LIKE EKKO-BSART, " PO TYPE
            WAERS LIKE EKKO-WAERS, " CURRENCY
            WKURS LIKE EKKO-WKURS, " EXCH GSTRATE
            RLWRT LIKE EKKO-RLWRT, " TOTAL VALUE
            KNUMV LIKE EKKO-KNUMV,
          END OF TY_EKKO.

DATA:  IT_EKKO TYPE STANDARD TABLE OF TY_EKKO,
       WA_EKKO TYPE TY_EKKO.

TYPES :   BEGIN OF TY_EKPO,
            EBELN   LIKE EKPO-EBELN, "PO NUMBER
            EBELP   LIKE EKPO-EBELP, " ITEM NUMBER
            LOEKZ   LIKE EKPO-LOEKZ, " Deletion Indicator
            MATNR   LIKE EKPO-MATNR, " MATERIAL NUMBER
            MATKL   LIKE EKPO-MATKL, " MATERIAL GROUP
            MTART   LIKE EKPO-MTART, " MATERIAL TYPE
            WERKS   LIKE EKPO-WERKS, " PLANT
            TXZ01   LIKE EKPO-TXZ01, " SHORT TEXT
            MENGE   LIKE EKPO-MENGE, " PO QUANTITY
            MEINS   LIKE EKPO-MEINS,  " PO ORDER UNIT
            NETWR   LIKE EKPO-NETWR, " NET PO AMT
            EFFWR   LIKE EKPO-EFFWR, " GROSS PO AMT
            BRTWR   LIKE EKPO-BRTWR, " NET PENDING AMT
            PEINH   LIKE EKPO-PEINH, " PRICE UNIT
            NETPR   LIKE EKPO-NETPR,
            J_1BNBM LIKE EKPO-J_1BNBM,
            EMATN   LIKE EKPO-EMATN,
            MWSKZ   LIKE EKPO-MWSKZ,
            ELIKZ   LIKE EKPO-ELIKZ, " DELIVERY COMPLETED
          END OF TY_EKPO.

DATA: IT_EKPO TYPE STANDARD TABLE OF TY_EKPO,
      WA_EKPO TYPE TY_EKPO.

TYPES : BEGIN OF TY_KONP,
          KNUMH LIKE KONP-KNUMH,
          KSCHL LIKE KONP-KSCHL,
          KBETR LIKE KONP-KBETR,
        END OF TY_KONP.

DATA:  IT_KONP TYPE STANDARD TABLE OF TY_KONP,
       WA_KONP TYPE TY_KONP.

TYPES :   BEGIN OF TY_KONV,
            KNUMV LIKE KONV-KNUMV,
            KPOSN LIKE KONV-KPOSN,
            KSCHL LIKE KONV-KSCHL,
            KWERT LIKE KONV-KWERT,
            KMEIN LIKE KONV-KMEIN,
            KBETR LIKE KONV-KBETR,
            LIFNR LIKE KONV-LIFNR,
          END OF TY_KONV.

DATA:  IT_KONV TYPE STANDARD TABLE OF TY_KONV,
       WA_KONV TYPE TY_KONV.

DATA: IT_A791 TYPE STANDARD TABLE OF A791,
      WA_A791 TYPE A791.

DATA: IT_A792 TYPE STANDARD TABLE OF A792,
      WA_A792 TYPE A792.

DATA: IT_A794 TYPE STANDARD TABLE OF A794,
      WA_A794 TYPE A794.

TYPES : BEGIN OF TY_FIN,
          EBELN        LIKE EKKO-EBELN, "PO NUMBER
          BEDAT        LIKE EKKO-BEDAT,
          BSART        LIKE EKKO-BSART, " PO TYPE
          LIFNR        LIKE EKKO-LIFNR, "VENDOR NUMBER
          EBELP        LIKE EKPO-EBELP, " ITEM NUMBER
          MATNR        LIKE EKPO-MATNR, " MATERIAL NUMBER
          MATKL        LIKE EKPO-MATKL, " MATERIAL GROUP
          MTART        LIKE EKPO-MTART, " MATERIAL TYPE
          WERKS        LIKE EKPO-WERKS, " PLANT
          TXZ01        LIKE EKPO-TXZ01, " SHORT TEXT
          MENGE        LIKE EKPO-MENGE, " PO QUANTITY
          MEINS        LIKE EKPO-MEINS,  " PO ORDER UNIT
          PEINH        LIKE EKPO-PEINH,
          NAME1        LIKE LFA1-NAME1,
          ORT01        LIKE LFA1-ORT01,
          MAKTX        LIKE MAKT-MAKTX,
          BKLAS        LIKE MBEW-BKLAS,
          GSTRATE      LIKE KOMV-KBETR,
          TOT_TAX_AMT  LIKE KOMV-KBETR,
          FREIGHT      TYPE KOMV-KBETR,
          DISC         TYPE KOMV-KBETR,
          J_1BNBM      LIKE EKPO-J_1BNBM,
          GR_QTY       LIKE RSEG-MENGE,
          TOT_VAL      LIKE KOMV-KWERT,
          UNIT_PRICE   LIKE KOMV-KWERT,
          WGBEZ        LIKE T023T-WGBEZ,
          GR_UNT       LIKE RSEG-MEINS,
          PENDING_QTY  LIKE RSEG-MENGE,
          OTHER_CHARGE TYPE KBETR,
          LTEX1        TYPE STRING,
          GATE_QTY     TYPE ZTMM_CLOGREQ_HDR-BILL_QTY,
          WRBTR        LIKE RSEG-WRBTR,
          CELCOL       TYPE SLIS_T_SPECIALCOL_ALV, "FOR COLOR
        END OF TY_FIN.

DATA: IT_FIN TYPE STANDARD TABLE OF TY_FIN,
      WA_FIN TYPE TY_FIN.

DATA : J_1BNBM LIKE EKPO-J_1BNBM.
DATA : TOT_VAL LIKE KOMV-KWERT.
DATA : WGBEZ  LIKE T023T-WGBEZ.
DATA : PENDING_QTY LIKE RSEG-MENGE.
DATA : GATE_QTY     TYPE ZTMM_CLOGREQ_HDR-BILL_QTY.

TYPES: BEGIN OF STR_REG,
         WERKS TYPE WERKS_D,
         REGIO TYPE T001W-REGIO,
       END OF STR_REG.

DATA: IT_REG TYPE STANDARD TABLE OF STR_REG,
      WA_REG TYPE STR_REG.

DATA : PERCENT  TYPE KOMV-KBETR.
DATA : LV_AMT1  TYPE CHAR20.
DATA : PERCENT1 TYPE CHAR20.
DATA : KBETR    TYPE CHAR20.
DATA : BASE_VAL LIKE KOMV-KWERT.
DATA : MSEHL    TYPE T006A-MSEHL.
DATA : MENGE    LIKE MSEG-MENGE.
DATA : MENGE1   LIKE MSEG-MENGE.
DATA : GR_QTY   LIKE MSEG-MENGE.
DATA : MEINS    LIKE MSEG-MEINS.
DATA : WRBTR    LIKE RSEG-WRBTR.
DATA : UNIT_PRICE LIKE KOMV-KWERT.

DATA: LV_FREIGHT1 TYPE KBETR,
      LT_FREIGHT1 TYPE CHAR20,
      LT_FREIGHT  TYPE CHAR20,
      LV_FREIGHT  TYPE KBETR.

*DATA : KONV TYPE TABLE OF KONV WITH HEADER LINE.
DATA : TAXCOM TYPE TAXCOM,
       EBELN  TYPE EKPO-EBELN,
       EBELP  TYPE EKPO-EBELP,
       XTKOMV TYPE TABLE OF KOMV WITH HEADER LINE,
       TKOMV  TYPE TABLE OF KOMV WITH HEADER LINE,
       T_KOMV TYPE TABLE OF KOMV WITH HEADER LINE,
       TKOMVD TYPE TABLE OF KOMVD WITH HEADER LINE.

DATA : LINES TYPE C LENGTH 2.
DATA : T001 TYPE T001.
DATA : KOMK TYPE KOMK.
DATA : KOMP TYPE KOMP.

DATA : CGST_GSTRATE LIKE KOMV-KBETR,
       SGST_GSTRATE LIKE KOMV-KBETR,
       IGST_GSTRATE LIKE KOMV-KBETR,
       GSTRATE      LIKE KOMV-KBETR,
       TOT_SGST_AMT LIKE KOMV-KBETR,
       TOT_IGST_AMT LIKE KOMV-KBETR,
       TOT_CGST_AMT LIKE KOMV-KBETR,
       TOT_TAX_AMT  LIKE KOMV-KBETR,
       LV_CURR      TYPE CHAR4,
       LV_AMOUNT    TYPE CHAR10,
       LV_UNIT      TYPE CHAR10,
       LV_AMOUNT1   TYPE KOMV-KBETR,
       LV_DIS_VALUE TYPE KOMV-KWERT,
       LV_DIS_VALU1 TYPE KOMV-KWERT,
       LV_DISC2     TYPE CHAR50,
       LV_MENGE     TYPE CHAR20,
       LV_NETPR     TYPE ZP,
       LV_NETWR     TYPE ZP,
       LV_ITEM      TYPE CHAR5,
       LV_PACK      TYPE KBETR,
       LV_LOAD      TYPE KBETR,
       LV_CUT       TYPE KBETR,
       LV_OTHER1    TYPE KBETR,
       LV_OTHER2    TYPE KBETR,
       OTHER_CHARGE TYPE KBETR.


DATA : KBETR1       TYPE KOMV-KBETR,
       KBETR2       TYPE KOMV-KBETR,
       KBETR3       TYPE KOMV-KBETR,
       BASIC        TYPE KOMV-KWERT,
       LV_CESS      TYPE KOMV-KWERT,
       LT_CESS      TYPE CHAR50,
       CESS_GSTRATE TYPE CHAR20,
       BUKRS        TYPE BUKRS.

DATA   TKOMVD2 LIKE KOMVD OCCURS 0 WITH HEADER LINE.
DATA:  VARY TYPE CHAR1.


DATA:  REGIO TYPE T001W-REGIO.
DATA:  WERKS TYPE T001W-WERKS.


DATA: ID_COLOR TYPE C.
DATA: CELCOL1 TYPE SLIS_SPECIALCOL_ALV.
DATA: SYPRINDEX TYPE I VALUE 1.
REFRESH: IT_EKKO, IT_EKPO.

*********** ITEM TEXT VARIABLE******
TYPES : BEGIN OF LTEX,
          TEMP LIKE STXH-TDNAME,
        END OF LTEX.

DATA : IT_LTEX TYPE STANDARD TABLE OF LTEX,
       WA_LTEX TYPE LTEX.



TYPES : BEGIN OF TY_STXH,                       "TO RETRIEVE ITEM TEXT
          TDOBJECT LIKE STXH-TDOBJECT,
          TDNAME   LIKE STXH-TDNAME,
          TDID     LIKE STXH-TDID,
          EBELN    LIKE EKPO-EBELN,
          EBELP    LIKE EKPO-EBELP,
          TEXT     TYPE STRING,
        END OF TY_STXH.


DATA : IT_STXH TYPE STANDARD TABLE OF TY_STXH,
       WA_STXH TYPE TY_STXH.

DATA :TEXT1 TYPE STRING,                      "TO STORE ITEM TEXT
      TEXT2 TYPE STRING,
      TEXT3 TYPE STRING,
      TEXT4 TYPE STRING,
      TEXT5 TYPE STRING,
      TEXT6 TYPE STRING,
      TEXT7 TYPE STRING,
      TEXT8 TYPE STRING.

DATA :IT_LINE LIKE STANDARD TABLE OF TLINE,
      WA_LINE LIKE LINE OF IT_LINE.
***********END OF ITEM TEXT VARIABLE******

INITIALIZATION.
  G_REPID = SY-REPID.

START-OF-SELECTION.
  SELECTION-SCREEN SKIP 1.
  SELECTION-SCREEN BEGIN OF BLOCK V-1 WITH FRAME TITLE TEXT-025.
  SELECT-OPTIONS:
  VENDOR  FOR EKKO-LIFNR, " VENDOR NUMBER
  PLANT   FOR EKPO-WERKS DEFAULT '1000', " PLANT
  MATNR   FOR EKPO-MATNR, " MATERIAL
  MATKL   FOR EKPO-MATKL, " MATERIAL GROUP
  MTART   FOR EKPO-MTART,
  PO_TYPE FOR EKKO-BSART, " PO TYPE
  DOC_DT  FOR EKKO-BEDAT OBLIGATORY, " POSTING DATE
  S_EBELN FOR EKKO-EBELN.
  SELECTION-SCREEN SKIP 1.
  SELECTION-SCREEN END OF BLOCK V-1.
  SELECTION-SCREEN SKIP 1.


  SELECTION-SCREEN BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-004.

  SELECTION-SCREEN BEGIN OF LINE.
  PARAMETERS : R1 RADIOBUTTON GROUP G1 DEFAULT 'X'.
  SELECTION-SCREEN COMMENT 5(20) TEXT-002 FOR FIELD R1.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
  PARAMETERS : R2 RADIOBUTTON GROUP G1.
  SELECTION-SCREEN COMMENT 5(20) TEXT-003 FOR FIELD R2.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN END OF BLOCK B2.

AT SELECTION-SCREEN OUTPUT.

  LOOP AT SCREEN.

    IF R1 EQ 'X' AND SCREEN-GROUP1 EQ 'S2'.
      SCREEN-INPUT = 0.
      MODIFY SCREEN.
    ENDIF.

    IF R2 EQ 'X' AND SCREEN-GROUP1 EQ 'S1'.
      SCREEN-INPUT = 0.
      MODIFY SCREEN.
    ENDIF.

  ENDLOOP.

START-OF-SELECTION.

  PERFORM DATA.
  PERFORM BUILD.
  PERFORM EVENTTAB_BUILD CHANGING GT_EVENTS.
*  PERFORM COMMENT USING GT_LIST_TOP_OF_PAGE.
  PERFORM CALL_ALV.


FORM DATA.

  SELECT EBELN
         BEDAT
         EKORG
         EKGRP
         LIFNR
         BSART
         WAERS
         WKURS
         RLWRT
         KNUMV
         FROM  EKKO INTO TABLE IT_EKKO
         WHERE LIFNR IN VENDOR AND BSART IN PO_TYPE AND BEDAT IN DOC_DT AND EBELN IN S_EBELN.

  IF SY-SUBRC EQ 0.
    SORT IT_EKKO BY EBELN.
  ENDIF.

  IF IT_EKKO IS NOT INITIAL.
    SELECT  EBELN
            EBELP
            LOEKZ
            MATNR
            MATKL
            MTART
            WERKS
            TXZ01
            MENGE
            MEINS
            NETWR
            EFFWR
            BRTWR
            PEINH
            NETPR
          J_1BNBM
           EMATN
           MWSKZ
           ELIKZ
      FROM EKPO INTO TABLE IT_EKPO FOR ALL ENTRIES IN IT_EKKO
                                       WHERE EBELN = IT_EKKO-EBELN
                                         AND LOEKZ NE 'L'
                                         AND WERKS IN PLANT
                                         AND MATNR IN MATNR
                                         AND MATKL IN MATKL
                                         AND MTART IN MTART.

    IF SY-SUBRC EQ 0.
      SORT IT_EKPO BY EBELN EBELP.
    ENDIF.
  ENDIF.

  IF IT_EKPO IS NOT INITIAL.


    SELECT WERKS REGIO FROM T001W INTO TABLE IT_REG FOR ALL ENTRIES IN IT_EKPO
    WHERE WERKS EQ IT_EKPO-WERKS.

  ENDIF.


**    ******************** GET ITEM TEXT *******************************
  LOOP AT IT_EKPO INTO WA_EKPO.
    CONCATENATE WA_EKPO-EBELN WA_EKPO-EBELP INTO WA_LTEX-TEMP.
    APPEND WA_LTEX TO IT_LTEX.

    IF SY-SUBRC <> 0.
* IMPLEMENT SUITABLE ERROR HANDLING HERE
    ENDIF.
    MODIFY IT_EKPO FROM WA_EKPO.
  ENDLOOP.

  SELECT TDOBJECT
         TDNAME
         TDID FROM STXH
    INTO TABLE  IT_STXH
    FOR ALL ENTRIES IN IT_LTEX WHERE TDOBJECT = 'EKPO'
                  AND TDNAME =  IT_LTEX-TEMP.

  LOOP AT IT_STXH INTO WA_STXH.

    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        CLIENT   = SY-MANDT
        ID       = WA_STXH-TDID
        LANGUAGE = SY-LANGU
        NAME     = WA_STXH-TDNAME
        OBJECT   = WA_STXH-TDOBJECT
      TABLES
        LINES    = IT_LINE.
    IF SY-SUBRC <> 0.
* IMPLEMENT SUITABLE ERROR HANDLING HERE
    ENDIF.

    LOOP AT IT_LINE INTO WA_LINE.

      IF SY-TABIX = 1.
        TEXT1 =   WA_LINE-TDLINE.

      ELSEIF SY-TABIX = 2.
        TEXT2 =   WA_LINE-TDLINE.

      ELSEIF SY-TABIX = 3.
        TEXT3 =   WA_LINE-TDLINE.

      ELSEIF SY-TABIX = 4.
        TEXT4 =   WA_LINE-TDLINE.

      ELSEIF SY-TABIX = 5.
        TEXT5 =   WA_LINE-TDLINE.

      ELSEIF SY-TABIX = 6.
        TEXT6 =   WA_LINE-TDLINE.

      ELSEIF SY-TABIX = 7.
        TEXT7 =   WA_LINE-TDLINE.
      ENDIF.


    ENDLOOP.
    REFRESH IT_LINE.
    CONCATENATE TEXT1 TEXT2 TEXT3 TEXT4 TEXT5 TEXT6 TEXT7 INTO WA_STXH-TEXT SEPARATED BY SPACE.
    WA_STXH-EBELN = WA_STXH-TDNAME+0(10).
    WA_STXH-EBELP = WA_STXH-TDNAME+10(5).
    MODIFY IT_STXH FROM WA_STXH.



  ENDLOOP.
********************* END ITEM TEXT *******************************

  SORT IT_EKPO BY EBELN EBELP.

  LOOP AT IT_EKPO INTO WA_EKPO.
    SELECT SINGLE WGBEZ FROM T023T INTO (T023T-WGBEZ) WHERE MATKL = WA_EKPO-MATKL.
    SELECT SINGLE BKLAS FROM MBEW INTO (MBEW-BKLAS) WHERE MATNR = WA_EKPO-MATNR.
    WA_FIN-EBELN = WA_EKPO-EBELN.
    WA_FIN-EBELP = WA_EKPO-EBELP.
    WA_FIN-WERKS = WA_EKPO-WERKS.
    WA_FIN-TXZ01 = WA_EKPO-TXZ01.
    WA_FIN-MENGE = WA_EKPO-MENGE.
    WA_FIN-MEINS = WA_EKPO-MEINS.
    WA_FIN-PEINH = WA_EKPO-PEINH.
    WA_FIN-MATKL = WA_EKPO-MATKL.
    WA_FIN-BKLAS = MBEW-BKLAS.
    WA_FIN-WGBEZ = T023T-WGBEZ.
    WA_FIN-MATNR = WA_EKPO-MATNR.


    CLEAR WA_STXH.
    READ TABLE IT_STXH INTO WA_STXH WITH KEY EBELN = WA_EKPO-EBELN
                                             EBELP = WA_EKPO-EBELP.
    WA_FIN-LTEX1 = WA_STXH-TEXT.


    CLEAR WA_EKKO.
    READ TABLE IT_EKKO INTO WA_EKKO WITH KEY EBELN = WA_EKPO-EBELN.
    SELECT SINGLE NAME1 ORT01 REGIO FROM LFA1 INTO (LFA1-NAME1,LFA1-ORT01,LFA1-REGIO) WHERE LIFNR = WA_EKKO-LIFNR.
    IF SY-SUBRC EQ 0.
      WA_FIN-EBELN = WA_EKKO-EBELN.
      WA_FIN-BEDAT = WA_EKKO-BEDAT.
      WA_FIN-LIFNR = WA_EKKO-LIFNR.
      WA_FIN-NAME1 = LFA1-NAME1.
      WA_FIN-ORT01 = LFA1-ORT01.
    ENDIF.


    CLEAR: IT_KONV[], IT_KONV, WA_KONV, IT_KONP[], IT_KONP, WA_KONP." IT_REP[], IT_REP, WA_REP.
    CLEAR: LV_AMT1, LV_DIS_VALUE, LV_DIS_VALU1, BASE_VAL, GSTRATE, SGST_GSTRATE, CGST_GSTRATE, IGST_GSTRATE,
    MSEG-MENGE,MENGE1,GR_QTY, TOT_SGST_AMT, TOT_CGST_AMT, TOT_IGST_AMT, TOT_TAX_AMT, TOT_VAL,UNIT_PRICE,
    MSEG-MEINS,PENDING_QTY,RSEG-WRBTR.

    CLEAR: LV_FREIGHT1,LV_FREIGHT,LV_PACK,LV_CUT,LV_LOAD,LV_OTHER2,LV_OTHER1,OTHER_CHARGE,LV_DIS_VALUE,LV_DIS_VALU1.

SELECT KNUMV KPOSN KSCHL KWERT KMEIN KBETR LIFNR FROM KONV INTO TABLE IT_KONV WHERE KNUMV = WA_EKKO-KNUMV AND KPOSN = WA_EKPO-EBELP.


SELECT SINGLE SUM( ERFMG ) FROM MSEG INTO (MSEG-MENGE) WHERE EBELN = WA_FIN-EBELN AND EBELP = WA_FIN-EBELP
                                                       AND LFBNR NE SPACE AND SHKZG EQ 'S' AND BWART EQ 101." GROUP BY MATNR.

SELECT SINGLE SUM( ERFMG ) FROM MSEG INTO (MENGE1) WHERE EBELN = WA_FIN-EBELN AND EBELP = WA_FIN-EBELP
                                                       AND LFBNR NE SPACE AND SHKZG EQ 'H' AND ( BWART EQ 102 OR BWART EQ 122 )." GROUP BY MATNR.

SELECT SINGLE SUM( WRBTR ) FROM RSEG INTO (RSEG-WRBTR) WHERE EBELN = WA_FIN-EBELN AND EBELP = WA_FIN-EBELP AND
                                                        LFBNR NE SPACE AND SHKZG EQ 'S'." GROUP BY MATNR.

SELECT SINGLE ERFME FROM MSEG INTO (MSEG-MEINS) WHERE EBELN = WA_FIN-EBELN AND EBELP = WA_FIN-EBELP AND LFBNR NE SPACE .




    GR_QTY = MSEG-MENGE - MENGE1.
    WA_FIN-GR_QTY = GR_QTY.
    WA_FIN-GR_UNT = MSEG-MEINS.
    WA_FIN-WRBTR  = RSEG-WRBTR.
*    IF RSEG-MENGE IS NOT INITIAL .
      PENDING_QTY =  WA_EKPO-MENGE - GR_QTY.
*    ENDIF.
    WA_FIN-PENDING_QTY = PENDING_QTY.
********************************************************* TAX VALUE
    IF IT_KONV[] IS NOT INITIAL.
      LOOP AT IT_KONV INTO WA_KONV WHERE KSCHL EQ 'YPCF' OR KSCHL EQ 'ZPCF' OR KSCHL EQ 'XPCF' OR
                                         KSCHL EQ 'YLDC' OR KSCHL EQ 'YLDN' OR KSCHL EQ 'ZOT3' OR
                                         KSCHL EQ 'YCUT' OR KSCHL EQ 'YCUL' OR KSCHL EQ 'ZOT1' OR
                                         KSCHL EQ 'ZOT2' OR KSCHL EQ 'ZOT6' OR KSCHL EQ 'ZOT5' OR
                                         KSCHL EQ 'ZOT4' OR KSCHL EQ 'ZRB1' OR KSCHL EQ 'FRB1' OR
                                         KSCHL EQ 'ZRIL' OR KSCHL EQ 'ZFI2' OR KSCHL EQ 'FRA1' OR
                                         KSCHL EQ 'FRC1' OR KSCHL EQ 'PBXX' OR KSCHL EQ 'P001' OR
                                         KSCHL EQ 'RA00' OR KSCHL EQ 'R001' OR KSCHL EQ 'R002' OR
                                         KSCHL EQ 'ZRB2' OR KSCHL EQ 'FRB3' OR KSCHL EQ 'FRA3' OR
                                         KSCHL EQ 'FRA1' OR KSCHL EQ 'FRC3' OR KSCHL EQ 'ZRL2' OR
                                         KSCHL EQ 'FRC1' .


        IF WA_KONV-KSCHL = 'PBXX' OR WA_KONV-KSCHL EQ 'P001'.
          BASE_VAL = WA_KONV-KWERT.
        ENDIF.
*********************************************************   FREIGHT
*        CLEAR: LV_FREIGHT1.
        IF WA_KONV-KSCHL = 'ZRB1' OR WA_KONV-KSCHL = 'FRB1' OR
           WA_KONV-KSCHL = 'ZRIL' OR WA_KONV-KSCHL = 'ZFI2'.
          LV_FREIGHT1 = LV_FREIGHT1 + WA_KONV-KBETR.
        ELSEIF WA_KONV-KSCHL = 'FRA1'.
          CLEAR : PERCENT, PERCENT1.
          IF WA_KONV-KBETR IS NOT INITIAL.
            LV_FREIGHT1 = LV_FREIGHT1 + WA_KONV-KWERT.
          ENDIF.
        ELSEIF WA_KONV-KSCHL = 'FRC1'.
          IF WA_EKPO-MENGE IS NOT INITIAL.
            CLEAR: KBETR.
            KBETR = WA_KONV-KBETR.
            LV_FREIGHT1 = LV_FREIGHT1 + ( WA_KONV-KBETR * WA_EKPO-MENGE ).
          ENDIF.
        ENDIF.

********************************************************       FREIGHT 1
*  CLEAR: LV_FREIGHT.
  IF WA_KONV-LIFNR EQ WA_EKKO-LIFNR OR WA_KONV-LIFNR EQ ''.
    IF WA_KONV-KSCHL = 'ZRB2' OR WA_KONV-KSCHL = 'FRB3'.
      LV_FREIGHT = LV_FREIGHT + WA_KONV-KBETR.
    ELSEIF WA_KONV-KSCHL = 'FRA3' OR WA_KONV-KSCHL = 'FRA1'.
      IF WA_KONV-KBETR IS NOT INITIAL.
        LV_FREIGHT = LV_FREIGHT + WA_KONV-KWERT.
      ENDIF.
    ELSEIF WA_KONV-KSCHL = 'FRC3' OR WA_KONV-KSCHL = 'ZRL2'
      OR WA_KONV-KSCHL = 'FRC1' ."OR WA_KOMV-KSCHL = 'ZRIL'.
      IF WA_EKPO-MENGE IS NOT INITIAL.
        CLEAR: KBETR.
        KBETR = WA_KONV-KBETR.
        CONDENSE KBETR.
        LV_FREIGHT = LV_FREIGHT + ( WA_KONV-KBETR * WA_EKPO-MENGE ).
      ENDIF.
    ENDIF.
ENDIF.


*************************************************  OTHER
*      CLEAR : LV_PACK.
        IF WA_KONV-KSCHL = 'YPCF'.
          LV_PACK = LV_PACK + WA_KONV-KBETR.
        ELSEIF WA_KONV-KSCHL = 'ZPCF'.
          CLEAR : PERCENT, PERCENT1.
          IF WA_KONV-KBETR IS NOT INITIAL.
            LV_PACK = LV_PACK + WA_KONV-KWERT.
          ENDIF.

        ELSEIF WA_KONV-KSCHL = 'XPCF'.
          IF WA_EKPO-MENGE IS NOT INITIAL.
            CLEAR: KBETR.
            KBETR = WA_KONV-KBETR.
            CONDENSE KBETR.
            LV_PACK = LV_PACK + ( WA_KONV-KBETR * WA_EKPO-MENGE ).
          ENDIF.
        ENDIF.
*---
*        CLEAR : LV_LOAD.
        IF WA_KONV-KSCHL = 'YLDC'.
          LV_LOAD = LV_LOAD + WA_KONV-KBETR.
        ELSEIF WA_KONV-KSCHL = 'YLDN'.
          IF WA_EKPO-MENGE IS NOT INITIAL.
            CLEAR: KBETR.
            KBETR = WA_KONV-KBETR.
            CONDENSE KBETR.
            LV_LOAD = LV_LOAD + ( WA_KONV-KBETR * WA_EKPO-MENGE ).

          ENDIF.
        ENDIF.
*---
*       CLEAR : LV_CUT.
        IF WA_KONV-KSCHL = 'YCUT'.
          LV_CUT = LV_CUT + WA_KONV-KBETR.
        ELSEIF WA_KONV-KSCHL = 'YCUL'.
          IF WA_EKPO-MENGE IS NOT INITIAL.
            CLEAR: KBETR.
            KBETR = WA_KONV-KBETR.
            CONDENSE KBETR.
            LV_CUT = LV_CUT + ( WA_KONV-KBETR * WA_EKPO-MENGE ).
          ENDIF.
        ENDIF.

*       CLEAR : LV_OTHER1.
        IF WA_KONV-KSCHL = 'ZOT3' ."OR WA_KONV-KSCHL = 'ZOT6'.
          LV_OTHER1 = LV_OTHER1 + WA_KONV-KBETR.
        ELSEIF WA_KONV-KSCHL = 'ZOT1' ."OR WA_KONV-KSCHL = 'ZOT4'.
          IF WA_KONV-KBETR IS NOT INITIAL.
            LV_OTHER1 = LV_OTHER1 + WA_KONV-KWERT.
          ENDIF.
        ELSEIF WA_KONV-KSCHL = 'ZOT2' ."OR WA_KONV-KSCHL = 'ZOT5'.
          IF WA_EKPO-MENGE IS NOT INITIAL.
            CLEAR: KBETR.
            KBETR = WA_KONV-KBETR.
            CONDENSE KBETR.
            LV_OTHER1 = LV_OTHER1 + ( WA_KONV-KBETR * WA_EKPO-MENGE ).
          ENDIF.
        ENDIF.
*------------------OTHER--------------*
*        CLEAR : LV_OTHER2, OTHER_CHARGE.
        IF WA_KONV-KSCHL = 'ZOT6' .
          LV_OTHER2 = LV_OTHER2 + WA_KONV-KBETR.
        ELSEIF WA_KONV-KSCHL = 'ZOT4' .
          CLEAR : PERCENT, PERCENT1.
          IF WA_KONV-KBETR IS NOT INITIAL.
            PERCENT = WA_KONV-KBETR / 10.
            PERCENT1 = PERCENT.
            LV_OTHER2 = LV_OTHER2 + WA_KONV-KWERT.
          ELSE.
          ENDIF.
        ELSEIF WA_KONV-KSCHL = 'ZOT5'.
          IF WA_EKPO-MENGE IS NOT INITIAL.
            CLEAR: KBETR.
            KBETR = WA_KONV-KBETR.
            LV_OTHER2 = LV_OTHER2 + ( WA_KONV-KBETR * WA_EKPO-MENGE ).
          ENDIF.
        ENDIF.

        OTHER_CHARGE = LV_OTHER2 + LV_OTHER1 + LV_CUT + LV_LOAD + LV_PACK.

************************************************** DISCOUNT
        CLEAR: LV_DIS_VALUE.",LV_DIS_VALU1.
        IF WA_KONV-KSCHL = 'RA00'.
          IF WA_KONV-KBETR IS NOT INITIAL.
            CLEAR:LV_AMOUNT,LV_CURR,LV_UNIT,LV_AMT1.
            IF WA_KONV-KWERT LT 0.
              LV_DIS_VALUE = WA_KONV-KWERT * -1.
            ELSE.
              LV_DIS_VALUE = WA_KONV-KWERT.
            ENDIF.
          ELSEIF WA_KONV-KSCHL = 'R001'.
            IF WA_KONV-KBETR IS NOT INITIAL.
              CLEAR:LV_AMOUNT,LV_CURR,LV_UNIT,LV_AMT1.
              IF WA_KONV-KWERT LT 0.
                LV_DIS_VALUE = WA_KONV-KWERT * -1.
              ELSE.
                LV_DIS_VALUE = WA_KONV-KWERT.
              ENDIF.
            ELSEIF WA_KONV-KSCHL = 'R002'.
              IF SY-SUBRC = 0.
                CLEAR:LV_AMOUNT,LV_CURR,LV_UNIT,LV_AMT1.
                IF WA_KONV-KWERT LT 0.
                  LV_DIS_VALUE = WA_KONV-KWERT * -1.
                ELSE.
                  LV_DIS_VALUE = WA_KONV-KWERT.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
        LV_DIS_VALU1 = LV_DIS_VALU1 + LV_DIS_VALUE.
        CLEAR: WA_KONV.
      ENDLOOP.

**********************************************************************  FREIGHT

      WA_FIN-DISC = LV_DIS_VALU1."LV_AMT1.
      WA_FIN-FREIGHT = LV_FREIGHT1 + LV_FREIGHT.
      WA_FIN-OTHER_CHARGE = OTHER_CHARGE.


********************************************************** TAX GST RATE AND VALUE

      CLEAR : J_1BNBM , VENCL.
      J_1BNBM = WA_EKPO-J_1BNBM.
      IF J_1BNBM IS NOT INITIAL.
        READ TABLE IT_REG INTO WA_REG   WITH KEY WERKS = WA_EKPO-WERKS.
        SELECT SINGLE VEN_CLASS INTO VENCL FROM J_1IMOVEND WHERE LIFNR EQ WA_EKKO-LIFNR.
        IF WA_EKPO-EMATN IS NOT INITIAL.
          IF VENCL IS NOT INITIAL.
            SELECT * FROM A792 INTO TABLE IT_A792 WHERE STEUC EQ WA_EKPO-J_1BNBM AND MWSKZ EQ WA_EKPO-MWSKZ
              AND KAPPL EQ 'TX' AND DATAB LE WA_EKKO-BEDAT AND DATBI GE WA_EKKO-BEDAT AND LLAND EQ 'IN' AND REGIO EQ LFA1-REGIO
              AND WKREG EQ WA_REG-REGIO AND VEN_CLASS EQ VENCL.
          ELSE.
            SELECT * FROM A792 INTO TABLE IT_A792 WHERE STEUC EQ WA_EKPO-J_1BNBM AND MWSKZ EQ WA_EKPO-MWSKZ
              AND KAPPL EQ 'TX' AND DATAB LE WA_EKKO-BEDAT AND DATBI GE WA_EKKO-BEDAT AND LLAND EQ 'IN' AND REGIO EQ LFA1-REGIO
              AND WKREG EQ WA_REG-REGIO AND VEN_CLASS EQ SPACE.
          ENDIF.
          IF IT_A792[] IS NOT INITIAL.
            SELECT KNUMH KSCHL KBETR FROM KONP INTO TABLE IT_KONP FOR
              ALL ENTRIES IN IT_A792
              WHERE KNUMH EQ IT_A792-KNUMH AND LOEVM_KO NE 'X'.
          ELSE.
            IF VENCL IS NOT INITIAL.
              SELECT * FROM A794 INTO TABLE IT_A794 WHERE STEUC EQ WA_EKPO-J_1BNBM AND WERKS EQ WA_EKPO-WERKS
                AND KAPPL EQ 'TX' AND DATAB LE WA_EKKO-BEDAT AND DATBI GE WA_EKKO-BEDAT AND LLAND EQ 'IN' AND REGIO EQ LFA1-REGIO
                AND WKREG EQ WA_REG-REGIO AND VEN_CLASS EQ VENCL.
            ELSE.
              SELECT * FROM A794 INTO TABLE IT_A794 WHERE STEUC EQ WA_EKPO-J_1BNBM AND WERKS EQ WA_EKPO-WERKS
                AND KAPPL EQ 'TX' AND DATAB LE WA_EKKO-BEDAT AND DATBI GE WA_EKKO-BEDAT AND LLAND EQ 'IN' AND REGIO EQ LFA1-REGIO
                AND WKREG EQ WA_REG-REGIO AND VEN_CLASS EQ SPACE.
            ENDIF.
            IF IT_A794[] IS NOT INITIAL.
              SELECT KNUMH KSCHL KBETR FROM KONP INTO TABLE IT_KONP FOR ALL ENTRIES IN IT_A794
                WHERE KNUMH EQ IT_A794-KNUMH AND LOEVM_KO NE 'X'.
            ENDIF.
          ENDIF.

        ELSE.
          SELECT * FROM A791 INTO TABLE IT_A791 WHERE STEUC EQ WA_EKPO-J_1BNBM AND MWSKZ EQ WA_EKPO-MWSKZ
            AND KAPPL EQ 'TX' AND DATAB LE WA_EKKO-BEDAT AND DATBI GE WA_EKKO-BEDAT AND REGIO EQ LFA1-REGIO
            AND WKREG EQ WA_REG-REGIO.
          IF IT_A791[] IS NOT INITIAL.
            SELECT KNUMH KSCHL KBETR  FROM KONP INTO TABLE IT_KONP FOR ALL ENTRIES IN IT_A791
              WHERE KNUMH EQ IT_A791-KNUMH AND LOEVM_KO NE 'X'.
          ENDIF.
        ENDIF.
      ENDIF.


      IF IT_KONP[] IS NOT INITIAL.
        LOOP AT IT_KONP INTO WA_KONP WHERE KSCHL EQ 'JISG' OR KSCHL EQ 'JICG' OR KSCHL EQ 'JIIG' OR
                                           KSCHL EQ 'JIUG' OR KSCHL EQ 'JCIS' OR KSCHL EQ 'JISN' OR
                                           KSCHL EQ 'JICN' OR KSCHL EQ 'JIIN' OR KSCHL EQ 'JCIN'.
          IF WA_KONP-KSCHL EQ 'JISG' OR WA_KONP-KSCHL EQ 'JIUG' OR WA_KONP-KSCHL EQ 'JISN'.
            SGST_GSTRATE = WA_KONP-KBETR / 10 .
            TOT_SGST_AMT = ( BASE_VAL * SGST_GSTRATE ) / 100.
          ELSEIF WA_KONP-KSCHL EQ 'JICG' OR WA_KONP-KSCHL EQ 'JICN'.
            CGST_GSTRATE = WA_KONP-KBETR / 10 .
            TOT_CGST_AMT = ( BASE_VAL * CGST_GSTRATE ) / 100.
          ELSEIF WA_KONP-KSCHL EQ 'JIIG' OR WA_KONP-KSCHL EQ 'JIIN'.
            IGST_GSTRATE = WA_KONP-KBETR / 10 .
            TOT_IGST_AMT = ( BASE_VAL * IGST_GSTRATE ) / 100.
          ENDIF.
          CLEAR: WA_KONP.
        ENDLOOP.

        IF SGST_GSTRATE IS NOT INITIAL.
          GSTRATE =  SGST_GSTRATE + CGST_GSTRATE.
        ELSEIF CGST_GSTRATE IS NOT INITIAL.
          GSTRATE =  SGST_GSTRATE + CGST_GSTRATE.
        ELSEIF IGST_GSTRATE IS NOT INITIAL.
          GSTRATE =  IGST_GSTRATE.
        ENDIF.
      ENDIF.


      IF TOT_SGST_AMT IS NOT INITIAL.
        TOT_TAX_AMT = TOT_SGST_AMT + TOT_CGST_AMT.
      ELSEIF  TOT_CGST_AMT IS NOT INITIAL.
        TOT_TAX_AMT = TOT_SGST_AMT + TOT_CGST_AMT.
      ELSEIF TOT_IGST_AMT IS NOT INITIAL.
        TOT_TAX_AMT = TOT_IGST_AMT.
      ENDIF.
    ENDIF.


    WA_FIN-TOT_TAX_AMT = TOT_TAX_AMT.

    WA_FIN-GSTRATE = GSTRATE .
    TOT_VAL = ( BASE_VAL + TOT_TAX_AMT + LV_FREIGHT1 + OTHER_CHARGE ) - LV_DIS_VALU1.

    IF WA_EKPO-MENGE IS NOT INITIAL.
      UNIT_PRICE = BASE_VAL / WA_EKPO-MENGE.
    ENDIF.
    WA_FIN-UNIT_PRICE = UNIT_PRICE.
    WA_FIN-TOT_VAL = TOT_VAL.


  IF R1 EQ 'X'.

*    if wa_fin-gr_qty is not initial or wa_fin-gr_qty ge 0.
*      if  wa_fin-gr_qty lt wa_fin-menge or wa_fin-wrbtr lt base_val.
      IF WA_EKPO-ELIKZ NE 'X'.
        APPEND WA_FIN TO IT_FIN.
      ENDIF.
*    ENDIF.



  ELSEIF R2 EQ 'X'.
*    IF  WA_FIN-GR_QTY EQ WA_FIN-MENGE AND WA_FIN-WRBTR EQ BASE_VAL.
    IF WA_EKPO-ELIKZ EQ 'X'.
      APPEND WA_FIN TO IT_FIN.
    ENDIF.
 ENDIF.

 CLEAR WA_FIN.
 ENDLOOP.
 SORT IT_FIN BY EBELN EBELP.

ENDFORM.


AT LINE-SELECTION.
  SET PARAMETER ID 'BES' FIELD WA_FIN-EBELN.
  CALL TRANSACTION 'ME23N' AND SKIP FIRST SCREEN.

END-OF-SELECTION.
*&---------------------------------------------------------------------*
*& FORM BUILD
*&---------------------------------------------------------------------*
FORM BUILD .
* DEFINE DATA FIELD CATALOG - EXPLAIN FIELD DESCRIPTION TO ALV
  DATA: FIELDCAT_IN TYPE SLIS_FIELDCAT_ALV.
  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'LIFNR'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'VENDOR NO'.
  FIELDCAT_LN-NO_ZERO = 'X'.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'NAME1'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'VENDOR NAME'.
  FIELDCAT_LN-OUTPUTLEN = 20.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'ORT01'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'VENDOR LOCATION'.
  FIELDCAT_LN-OUTPUTLEN = 10.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'EBELN'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'PO NUMBER'.
  FIELDCAT_LN-HOTSPOT = 'X'.
  FIELDCAT_LN-OUTPUTLEN = 10.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'EBELP'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'PO ITEM'.
  FIELDCAT_LN-OUTPUTLEN = 10.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'BEDAT'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-HOTSPOT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'PO DATE'.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'MATNR'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'MAT NUMBER'.
  FIELDCAT_LN-OUTPUTLEN = 10.
  FIELDCAT_LN-NO_ZERO = 'X'.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'TXZ01'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'MAT DESCRIPTION'.
  FIELDCAT_LN-OUTPUTLEN = 20.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'LTEX1'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'ITEM TEXT '.
  FIELDCAT_LN-OUTPUTLEN = 20.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.


  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'MATKL'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'MAT GROUP'.
  FIELDCAT_LN-OUTPUTLEN = 10.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'WGBEZ'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'MAT GRP DESCRIPTION'.
  FIELDCAT_LN-OUTPUTLEN = 20.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'MENGE'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'PO QTY'.
  FIELDCAT_LN-OUTPUTLEN = 10.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'MEINS'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'UOM'.
  FIELDCAT_LN-OUTPUTLEN = 5.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'UNIT_PRICE'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'UNIT PRICE'.
  FIELDCAT_LN-OUTPUTLEN = 5.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'GR_QTY'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'GR QTY'.
  FIELDCAT_LN-OUTPUTLEN = 10.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'GR_UNT'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'GR UOM'.
  FIELDCAT_LN-OUTPUTLEN = 5.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'PENDING_QTY'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'PENDING_QTY'.
  FIELDCAT_LN-OUTPUTLEN = 10.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'GR_UNT'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'PEN UOM'.
  FIELDCAT_LN-OUTPUTLEN = 5.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'WRBTR'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'INVOICE VALUE'.
  FIELDCAT_LN-OUTPUTLEN = 10.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'BKLAS'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'VALUATION CLASS'.
  FIELDCAT_LN-OUTPUTLEN = 5.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'GSTRATE'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'TAX RATE'.
  FIELDCAT_LN-OUTPUTLEN = 5.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'TOT_TAX_AMT'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'TAX VALUE'.
  FIELDCAT_LN-OUTPUTLEN = 10.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'DISC'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'DISCOUNT'.
  FIELDCAT_LN-OUTPUTLEN = 5.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'FREIGHT'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'FREIGHT'.
  FIELDCAT_LN-OUTPUTLEN = 5.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'OTHER_CHARGE'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'OTHER CHARGE'.
  FIELDCAT_LN-OUTPUTLEN = 18.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

  CLEAR FIELDCAT_IN.
  FIELDCAT_LN-FIELDNAME = 'TOT_VAL'.
  FIELDCAT_LN-TABNAME = 'IT_FIN'.
  FIELDCAT_LN-NO_OUT = ' '.
  FIELDCAT_LN-SELTEXT_L = 'TOTAL ORDER VALUE'.
  FIELDCAT_LN-OUTPUTLEN = 18.
  APPEND FIELDCAT_LN TO GT_FIELDCAT.

* DATA SORTING AND SUBTOTAL
  DATA: GS_SORT TYPE SLIS_SORTINFO_ALV.
  CLEAR GS_SORT.
  GS_SORT-FIELDNAME = 'EBELN'.
* GS_SORT-SPOS = 1.
  GS_SORT-UP = 'X'.
* GS_SORT-SUBTOT = 'X'.
  APPEND GS_SORT TO GT_SORT.
  CLEAR GS_SORT.
  GS_SORT-FIELDNAME = 'LIFNR'.
* GS_SORT-SPOS = 1.
  GS_SORT-UP = 'X'.
* GS_SORT-SUBTOT = 'X'.
  APPEND GS_SORT TO GT_SORT.
ENDFORM. "BUILD
*&--------------------------------------------------------------------*
*& FORM CALL_ALV
*&--------------------------------------------------------------------*
FORM CALL_ALV.
* ABAP ALV GRID LIST VIEWER
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      I_CALLBACK_PROGRAM      = G_REPID
      I_CALLBACK_USER_COMMAND = 'FRM_ALV_USER_COMMAND'
*      I_CALLBACK_TOP_OF_PAGE  = 'TOP_OF_PAGE'
      I_STRUCTURE_NAME        = 'IT_FIN'
      IS_LAYOUT               = GS_LAYOUT
      IT_FIELDCAT             = GT_FIELDCAT[]
      I_DEFAULT               = 'X'
      I_SAVE                  = 'A'
      IS_VARIANT              = GT_VARIANT
    TABLES
      T_OUTTAB                = IT_FIN.
ENDFORM. "CALL_ALV
*&--------------------------------------------------------------------*
*& FORM EVENTTAB_BUILD
*&--------------------------------------------------------------------*
* HEADER FORM
FORM EVENTTAB_BUILD CHANGING LT_EVENTS TYPE SLIS_T_EVENT.
  CONSTANTS:
    GC_FORMNAME_TOP_OF_PAGE TYPE SLIS_FORMNAME VALUE 'TOP_OF_PAGE'.
  DATA: LS_EVENT TYPE SLIS_ALV_EVENT.
  CALL FUNCTION 'REUSE_ALV_EVENTS_GET'
    EXPORTING
      I_LIST_TYPE = 0
    IMPORTING
      ET_EVENTS   = LT_EVENTS.
  READ TABLE LT_EVENTS WITH KEY NAME = SLIS_EV_TOP_OF_PAGE
    INTO LS_EVENT.
  IF SY-SUBRC = 0.
    MOVE GC_FORMNAME_TOP_OF_PAGE TO LS_EVENT-FORM.
    APPEND LS_EVENT TO LT_EVENTS.
  ENDIF.
ENDFORM. "EVENTTAB_BUILD
*&--------------------------------------------------------------------*

*&--------------------------------------------------------------------*
*& FORM FRM_ALV_USER_COMMAND
*&--------------------------------------------------------------------*
FORM FRM_ALV_USER_COMMAND USING UCOMM LIKE SY-UCOMM
SELFIELD TYPE SLIS_SELFIELD.
  CASE UCOMM.
    WHEN '&IC1'.
      IF SELFIELD-TABNAME = 'IT_FIN'.
        IF SELFIELD-FIELDNAME = 'EBELN'.
          READ TABLE IT_FIN INTO WA_FIN INDEX SELFIELD-TABINDEX.
          IF SY-SUBRC = 0.
            SET PARAMETER ID 'BES' FIELD WA_FIN-EBELN.
            CALL TRANSACTION 'ME23N' AND SKIP FIRST SCREEN.
          ENDIF.
        ENDIF.
      ENDIF.
  ENDCASE.
ENDFORM. "FRM_ALV_USER_COMMAND

