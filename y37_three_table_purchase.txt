*&---------------------------------------------------------------------*
*& Report  Y37_THREE_TABLE_PURCHASE
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  Y37_THREE_TABLE_PURCHASE NO STANDARD PAGE HEADING LINE-COUNT 300 LINE-SIZE 300.

TABLES: EKKO, EKPO, EBAN.

TYPES: BEGIN OF TY_EKKO,
       EBELN TYPE EBELN,     " PUCHASE DOCUMENT NO
       AEDAT TYPE ERDAT,     " PURCHASE ORDER DATE
       ERNAM TYPE ERNAM,     " USER WHO CREATED
       EKORG TYPE EKORG,     " PURCHASE ORGANIZATION
       END OF TY_EKKO.


DATA: IT_EKKO TYPE STANDARD TABLE OF TY_EKKO,
       WA_EKKO TYPE TY_EKKO.

TYPES: BEGIN OF TY_EKPO,
       EBELN TYPE EBELN,
       EBELP TYPE EBELP,      " ITEM NO
       MATNR LIKE EKPO-MATNR,
       WERKS TYPE EWERK,      " PLANT
       NETPR TYPE BPREI,      " NET PRICE
       NETWR TYPE BWERT,      " FINAL PRICE
       END OF TY_EKPO.


DATA: IT_EKPO TYPE STANDARD TABLE OF TY_EKPO,
       WA_EKPO TYPE TY_EKPO.

TYPES: BEGIN OF TY_EBAN,
       BANFN TYPE BANFN,       " PURCHASE REQUISITION NO
*       WERKS TYPE EWERK,
       EBELN TYPE EBELN,
       MATNR LIKE EBAN-MATNR,
*       EBELN TYPE BSTNR,      " PURCHASE ORDER NO
*       BEDAT TYPE BEDAT,      " PURCHASE ORDER DATE
       END OF TY_EBAN.

DATA: IT_EBAN TYPE STANDARD TABLE OF TY_EBAN,
       WA_EBAN TYPE TY_EBAN.

TYPES: BEGIN OF TY_MAKT,
      MATNR LIKE MAKT-MATNR,
      MAKTX LIKE MAKT-MAKTX,
      END OF TY_MAKT.

DATA: IT_MAKT TYPE STANDARD TABLE OF TY_MAKT,
      WA_MAKT TYPE TY_MAKT.

TYPES: BEGIN OF TY_FIN,
       EBELN TYPE EBELN,     " PUCHASE DOCUMENT NO
       AEDAT TYPE AFDAT,     " DATE
       ERNAM TYPE ERNAM,     " USER WHO CREATED
       EKORG TYPE EKORG,     " PURCHASE ORGANIZATION
       EBELP TYPE EBELP,      " ITEM NO
       MATNR LIKE EKPO-MATNR,
       WERKS TYPE EWERK,      " PLANT
       NETPR TYPE BPREI,      " NET PRICE
       NETWR TYPE BWERT,      " FINAL PRICE
       BANFN TYPE BANFN,
       MAKTX LIKE MAKT-MAKTX,
*       EBELN TYPE BSTNR,      " PURCHASE ORDER NO
*       BEDAT TYPE BEDAT,      " PURCHASE ORDER DATE
       END OF TY_FIN.

DATA: IT_FIN TYPE STANDARD TABLE OF TY_FIN,
      WA_FIN TYPE TY_FIN.

DATA: GV_TABIX TYPE SY-TABIX.

*DATA: FORMATTED_TEXT TYPE C.

DATA: P_EBELN TYPE EBELN,
      P_AEDAT TYPE AFDAT,
      P_EKORG TYPE EKORG,
      P_WERKS TYPE WERKS,
      P_BANFN TYPE BANFN.

INITIALIZATION.

  SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
  SELECT-OPTIONS : S_EBELN FOR EKKO-EBELN ,"OBLIGATORY,
                   S_AEDAT FOR EKKO-AEDAT,
                   S_EKORG FOR EKKO-EKORG,
                   S_WERKS FOR EKPO-WERKS,
                   S_BANFN FOR EBAN-BANFN.
  SELECTION-SCREEN END OF BLOCK B1.

AT SELECTION-SCREEN .

*  IF S_WERKS AND S_EKORG AND S_EBELN AND S_BANFN AND S_AEDAT AND S_BANFN IS INITIAL.
*    MESSAGE 'PLAESE FILL ANY PARAMETER' TYPE 'E'.
*  ENDIF.

  IF S_EBELN IS NOT INITIAL.
    SELECT SINGLE EBELN FROM EKKO INTO P_EBELN WHERE EBELN IN S_EBELN.
    IF SY-SUBRC NE 0.
      MESSAGE 'INCORRECT PURCHASE NO' TYPE 'I'.
   STOP.
    ENDIF.
  ENDIF.

  IF S_EKORG IS NOT INITIAL.
    SELECT SINGLE EKORG FROM EKKO INTO P_EKORG WHERE EKORG IN S_EKORG.
    IF SY-SUBRC NE 0.
      MESSAGE 'INCORRECT PURCHASE ORGANIZATION' TYPE 'I'.
    ENDIF.
  ENDIF.


  IF S_WERKS IS NOT INITIAL.
    SELECT SINGLE WERKS FROM MARC INTO P_WERKS WHERE WERKS IN S_WERKS.
    IF SY-SUBRC NE 0.
      MESSAGE 'INCORRECT PLANT' TYPE 'I'.
    ENDIF.
  ENDIF.

  IF S_BANFN IS NOT INITIAL.
    SELECT SINGLE BANFN FROM EBAN INTO P_BANFN WHERE BANFN IN S_BANFN.
    IF SY-SUBRC NE 0.
      MESSAGE 'INCORRECT REQUISITION NO' TYPE 'I'.
      STOP.
    ENDIF.
  ENDIF.


TOP-OF-PAGE.
  WRITE:/20 'PURCHASING DETAIL REPORT FROM TABLE EKKO & EKPO & EBAN'.
  SKIP.
  WRITE:/1 'PURCHASE DOC NO',
         20 'CREATED ON',
         40 'CREATED BY',
         60 'ORGANIZATION',
         80 'ITEM NO',
         100 'PLANT',
         120 'NET PRICE',
         140 'FINAL PRICE',
*       140 WA_FIN-EBELN,
         160 'REQUIZITION NO',
         180 'MATERIAL DESC'.
*         200 'MATERIAL NO'.
  SKIP.

START-OF-SELECTION.



    SELECT EBELN
           AEDAT
           ERNAM
           EKORG FROM  EKKO INTO TABLE IT_EKKO
               WHERE EKORG IN S_EKORG AND EBELN IN S_EBELN AND AEDAT IN S_AEDAT.
    IF SY-SUBRC EQ 0.
      SORT IT_EKKO BY EBELN.
    ENDIF.

    IF IT_EKKO IS NOT INITIAL.
      SELECT EBELN
             EBELP
             MATNR
             WERKS
             NETPR
             NETWR
             FROM EKPO INTO TABLE IT_EKPO FOR ALL ENTRIES IN IT_EKKO
                                         WHERE EBELN = IT_EKKO-EBELN
                                           AND WERKS IN S_WERKS.
      IF SY-SUBRC EQ 0.
        SORT IT_EKPO BY EBELN.
      ENDIF.
    ENDIF.

    IF IT_EKPO IS NOT INITIAL.
      SELECT
             BANFN
             EBELN
             MATNR
             FROM EBAN INTO TABLE IT_EBAN FOR ALL ENTRIES IN IT_EKPO
                                         WHERE EBELN = IT_EKPO-EBELN
                                            AND BANFN IN S_BANFN.
      IF SY-SUBRC EQ 0.
        SORT IT_EBAN BY EBELN.

      ENDIF.
    ENDIF.

    IF IT_EBAN IS NOT INITIAL.
      SELECT MATNR
             MAKTX
             FROM MAKT INTO TABLE IT_MAKT FOR ALL ENTRIES IN IT_EBAN
                  WHERE MATNR = IT_EBAN-MATNR.
      IF SY-SUBRC EQ 0.
        SORT IT_MAKT BY MATNR.
      ENDIF.
    ENDIF.

    LOOP AT IT_EKPO INTO WA_EKPO.
      WA_FIN-EBELN = WA_EKPO-EBELN.
      WA_FIN-EBELP = WA_EKPO-EBELP.
      WA_FIN-MATNR = WA_EKPO-MATNR.
      WA_FIN-WERKS = WA_EKPO-WERKS.
      WA_FIN-NETPR = WA_EKPO-NETPR.
      WA_FIN-NETWR = WA_EKPO-NETWR.


      CLEAR WA_EKKO.
*    GV_TABIX = SY-INDEX.
      READ TABLE IT_EKKO INTO WA_EKKO WITH KEY EBELN = WA_EKPO-EBELN.
      IF SY-SUBRC EQ 0.
        WA_FIN-AEDAT = WA_EKKO-AEDAT.
        WA_FIN-ERNAM = WA_EKKO-ERNAM.
        WA_FIN-EKORG = WA_EKKO-EKORG.
      ENDIF.


      CLEAR WA_EBAN.
      READ TABLE IT_EBAN INTO WA_EBAN WITH KEY EBELN = WA_EKPO-EBELN.
      IF SY-SUBRC EQ 0.
*      WA_FIN-EBELN = WA_EBAN-EBELN.
        WA_FIN-BANFN = WA_EBAN-BANFN.
      ENDIF.

      APPEND WA_FIN TO IT_FIN.
*    MODIFY IT_FIN FROM WA_FIN TRANSPORTING EBELN.
      CLEAR WA_FIN.

    ENDLOOP.


    LOOP AT IT_FIN INTO WA_FIN.
      CLEAR GV_TABIX.
      GV_TABIX = SY-TABIX.
*      READ TABLE IT_EKPO INTO WA_eKPO WITH KEY EBELN = WA_FIN-EBELN.
*      IF SY-SUBRC EQ 0.
*      MOVE WA_EKPO-EBELN TO WA_
*      ENDIF.

      READ TABLE IT_MAKT INTO WA_MAKT WITH KEY MATNR = WA_FIN-MATNR.

      IF SY-SUBRC  = 0 .
*        MOVE WA_MAKT-MATNR TO WA_FIN-MATNR.
        MOVE WA_MAKT-MAKTX TO WA_FIN-MAKTX.
*        MOVE WA_EKKO-ERNAM TO WA_FIN-ERNAM.

        MODIFY IT_FIN FROM WA_FIN  INDEX GV_TABIX TRANSPORTING MAKTX.
      ENDIF.

      CLEAR : WA_FIN,
               WA_MAKT.
    ENDLOOP.






    LOOP AT IT_FIN INTO WA_FIN.
      WRITE:/1 WA_FIN-EBELN,
             20 WA_FIN-AEDAT ,
             40 WA_FIN-ERNAM,
             60 WA_FIN-EKORG,
             80 WA_FIN-EBELP,
             100 WA_FIN-WERKS,
             120 WA_FIN-NETPR LEFT-JUSTIFIED,                    "FORMATTEED_TEXT LEFT-JUSTIFIED,
             140 WA_FIN-NETWR LEFT-JUSTIFIED,
*       140 WA_FIN-EBELN,
             160 WA_FIN-BANFN,
             180 WA_FIN-MAKTX.
*           200 WA_FIN-MATNR.
    ENDLOOP.