*&---------------------------------------------------------------------*
*& Report  Y37_ALV_REPORT
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  Y37_ALV_REPORT NO STANDARD PAGE HEADING LINE-COUNT 100(10) LINE-SIZE 200 MESSAGE-ID ZRV.

TYPE-POOLS: SLIS .

TABLES: EKKO, EKPO, EBAN .



DATA: IT_FCAT TYPE SLIS_T_FIELDCAT_ALV WITH HEADER LINE,
      WA_FCAT LIKE LINE OF IT_FCAT,
      GD_LAYOUT TYPE SLIS_LAYOUT_ALV.



TYPES: BEGIN OF TY_EKKO,
       EBELN TYPE EBELN,     " PUCHASE DOCUMENT NO
       AEDAT TYPE ERDAT,     " PURCHASE ORDER DATE
       ERNAM TYPE ERNAM,     " USER WHO CREATED
       EKORG TYPE EKORG,     " PURCHASE ORGANIZATION
       END OF TY_EKKO.


DATA: IT_EKKO TYPE STANDARD TABLE OF TY_EKKO,
       WA_EKKO TYPE TY_EKKO.

TYPES: BEGIN OF TY_EKPO,
       EBELN TYPE EBELN,
       EBELP TYPE EBELP,      " ITEM NO
       MATNR TYPE MATNR,
       WERKS TYPE EWERK,      " PLANT
       NETPR TYPE BPREI,      " NET PRICE
       NETWR TYPE BWERT,      " FINAL PRICE
       END OF TY_EKPO.


DATA: IT_EKPO TYPE STANDARD TABLE OF TY_EKPO,
       WA_EKPO TYPE TY_EKPO.

TYPES: BEGIN OF TY_EBAN,
       BANFN TYPE BANFN,       " PURCHASE REQUISITION NO
*       WERKS TYPE EWERK,
       EBELN TYPE EBELN,
       MATNR TYPE MATNR,
*       EBELN TYPE BSTNR,      " PURCHASE ORDER NO
*       BEDAT TYPE BEDAT,      " PURCHASE ORDER DATE
       END OF TY_EBAN.

DATA: IT_EBAN TYPE STANDARD TABLE OF TY_EBAN,
       WA_EBAN TYPE TY_EBAN.

TYPES: BEGIN OF TY_MAKT,
      MATNR LIKE MAKT-MATNR,
      MAKTX LIKE MAKT-MAKTX,
      END OF TY_MAKT.

DATA: IT_MAKT TYPE STANDARD TABLE OF TY_MAKT,
      WA_MAKT TYPE TY_MAKT.

TYPES: BEGIN OF TY_FIN,
       EBELN TYPE EBELN,     " PUCHASE DOCUMENT NO
       AEDAT TYPE AFDAT,     " DATE
       ERNAM TYPE ERNAM,     " USER WHO CREATED
       EKORG TYPE EKORG,     " PURCHASE ORGANIZATION
       EBELP TYPE EBELP,      " ITEM NO
       MATNR LIKE EKPO-MATNR,
       WERKS TYPE EWERK,      " PLANT
       NETPR TYPE BPREI,      " NET PRICE
       NETWR TYPE BWERT,      " FINAL PRICE
       BANFN TYPE BANFN,
       MAKTX LIKE MAKT-MAKTX,
*       EBELN TYPE BSTNR,      " PURCHASE ORDER NO
*       BEDAT TYPE BEDAT,      " PURCHASE ORDER DATE
       END OF TY_FIN.

DATA: IT_FIN TYPE STANDARD TABLE OF TY_FIN,
      WA_FIN TYPE TY_FIN.

DATA: GV_TABIX TYPE SY-TABIX.



DATA: P_EBELN TYPE EBELN,
      P_AEDAT TYPE AFDAT,
      P_EKORG TYPE EKORG,
      P_WERKS TYPE WERKS,
      P_BANFN TYPE BANFN.

INITIALIZATION.

  SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
  SELECT-OPTIONS : S_EBELN FOR EKKO-EBELN ,
                   S_AEDAT FOR EKKO-AEDAT,
                   S_EKORG FOR EKKO-EKORG,
                   S_WERKS FOR EKPO-WERKS,
                   S_BANFN FOR EBAN-BANFN.
  SELECTION-SCREEN END OF BLOCK B1.

AT SELECTION-SCREEN .

  IF S_WERKS AND S_EKORG AND S_EBELN AND S_BANFN AND S_AEDAT AND S_BANFN IS INITIAL.
    MESSAGE 'PLAESE FILL ANY PARAMETER' TYPE 'E'.
  ENDIF.

  IF S_EBELN IS NOT INITIAL.
    SELECT SINGLE EBELN FROM EKKO INTO P_EBELN WHERE EBELN IN S_EBELN.
    IF SY-SUBRC NE 0.
      MESSAGE 'INCORRECT PURCHASE NO' TYPE 'I'.
      STOP.
    ENDIF.
  ENDIF.

  IF S_EKORG IS NOT INITIAL.
    SELECT SINGLE EKORG FROM EKKO INTO P_EKORG WHERE EKORG IN S_EKORG.
    IF SY-SUBRC NE 0.
      MESSAGE 'INCORRECT PURCHASE ORGANIZATION' TYPE 'I'.
    ENDIF.
  ENDIF.


  IF S_WERKS IS NOT INITIAL.
    SELECT SINGLE WERKS FROM MARC INTO P_WERKS WHERE WERKS IN S_WERKS.
    IF SY-SUBRC NE 0.
      MESSAGE 'INCORRECT PLANT' TYPE 'I'.
    ENDIF.
  ENDIF.

  IF S_BANFN IS NOT INITIAL.
    SELECT SINGLE BANFN FROM EBAN INTO P_BANFN WHERE BANFN IN S_BANFN.
    IF SY-SUBRC NE 0.
      MESSAGE 'INCORRECT REQUISITION NO' TYPE 'I'.
      STOP.
    ENDIF.
  ENDIF.


START-OF-SELECTION.

  PERFORM SELECT_DATA.

  PERFORM GET_DATA.

  PERFORM CALL_FUNCTION.

END-OF-SELECTION.



***********************************************************

FORM SELECT_DATA.



  IF S_BANFN IS INITIAL.

    SELECT EBELN
          AEDAT
          ERNAM
          EKORG FROM  EKKO INTO TABLE IT_EKKO
              WHERE EKORG IN S_EKORG AND EBELN IN S_EBELN AND AEDAT IN S_AEDAT.
    IF SY-SUBRC EQ 0.
      SORT IT_EKKO BY EBELN.
    ENDIF.

    IF IT_EKKO IS NOT INITIAL.
      SELECT EBELN
             EBELP
             MATNR
             WERKS
             NETPR
             NETWR
             FROM EKPO INTO TABLE IT_EKPO FOR ALL ENTRIES IN IT_EKKO
                                         WHERE EBELN = IT_EKKO-EBELN
                                           AND WERKS IN S_WERKS.
      IF SY-SUBRC EQ 0.
        SORT IT_EKPO BY EBELN.
      ENDIF.
    ENDIF.

    IF IT_EKPO IS NOT INITIAL.
      SELECT
             BANFN
             EBELN
             MATNR
             FROM EBAN INTO TABLE IT_EBAN FOR ALL ENTRIES IN IT_EKPO
                                         WHERE EBELN = IT_EKPO-EBELN
                                            AND BANFN IN S_BANFN.
      IF SY-SUBRC EQ 0.
        SORT IT_EBAN BY EBELN.

      ENDIF.
    ENDIF.

    IF IT_EKPO IS NOT INITIAL.
      SELECT MATNR
             MAKTX
             FROM MAKT INTO TABLE IT_MAKT FOR ALL ENTRIES IN IT_EKPO
                  WHERE MATNR = IT_EKPO-MATNR.
      IF SY-SUBRC EQ 0.
        SORT IT_MAKT BY MATNR.
      ENDIF.

    ENDIF.



    LOOP AT IT_EKPO INTO WA_EKPO.
      WA_FIN-EBELN = WA_EKPO-EBELN.
      WA_FIN-EBELP = WA_EKPO-EBELP.
      WA_FIN-MATNR = WA_EKPO-MATNR.
      WA_FIN-WERKS = WA_EKPO-WERKS.
      WA_FIN-NETPR = WA_EKPO-NETPR.
      WA_FIN-NETWR = WA_EKPO-NETWR.


      CLEAR WA_EKKO.
      READ TABLE IT_EKKO INTO WA_EKKO WITH KEY EBELN = WA_EKPO-EBELN.
      IF SY-SUBRC EQ 0.
        WA_FIN-AEDAT = WA_EKKO-AEDAT.
        WA_FIN-ERNAM = WA_EKKO-ERNAM.
        WA_FIN-EKORG = WA_EKKO-EKORG.
      ENDIF.


      CLEAR WA_EBAN.
      READ TABLE IT_EBAN INTO WA_EBAN WITH KEY EBELN = WA_EKPO-EBELN.
      IF SY-SUBRC EQ 0.
        WA_FIN-BANFN = WA_EBAN-BANFN.
      ENDIF.

      APPEND WA_FIN TO IT_FIN.
      CLEAR WA_FIN.

    ENDLOOP.



  ELSE.


    SELECT BANFN EBELN MATNR FROM EBAN INTO TABLE IT_EBAN WHERE BANFN IN S_BANFN AND
                                                                EBELN IN S_EBELN.

    IF IT_EBAN IS NOT  INITIAL.
      SELECT  EBELN AEDAT ERNAM EKORG FROM EKKO INTO TABLE IT_EKKO FOR ALL ENTRIES IN IT_EBAN
        WHERE EBELN = IT_EBAN-EBELN AND
              AEDAT IN S_AEDAT AND
              EKORG IN S_EKORG .

    ENDIF.

    IF IT_EKKO IS NOT INITIAL.
      SELECT  EBELN EBELP MATNR WERKS NETPR NETWR FROM EKPO INTO TABLE IT_EKPO FOR ALL ENTRIES IN IT_EKKO
        WHERE EBELN = IT_EKKO-EBELN AND WERKS IN S_WERKS.

    ENDIF.

    IF IT_EKPO IS NOT INITIAL .
      SELECT MATNR MAKTX FROM MAKT INTO TABLE IT_MAKT FOR ALL ENTRIES IN IT_EKPO WHERE MATNR = IT_EKPO-MATNR.
    ENDIF.

    LOOP AT IT_EKPO INTO WA_EKPO.
      WA_FIN-EBELN = WA_EKPO-EBELN.
      WA_FIN-EBELP = WA_EKPO-EBELP.
      WA_FIN-MATNR = WA_EKPO-MATNR.
      WA_FIN-WERKS = WA_EKPO-WERKS.
      WA_FIN-NETPR = WA_EKPO-NETPR.
      WA_FIN-NETWR = WA_EKPO-NETWR.


      CLEAR WA_EKKO.
      READ TABLE IT_EKKO INTO WA_EKKO WITH KEY EBELN = WA_EKPO-EBELN.
      IF SY-SUBRC EQ 0.
        WA_FIN-AEDAT = WA_EKKO-AEDAT.
        WA_FIN-ERNAM = WA_EKKO-ERNAM.
        WA_FIN-EKORG = WA_EKKO-EKORG.
      ENDIF.


      CLEAR WA_EBAN.
      READ TABLE IT_EBAN INTO WA_EBAN WITH KEY EBELN = WA_EKPO-EBELN.
      IF SY-SUBRC EQ 0.
        WA_FIN-BANFN = WA_EBAN-BANFN.
      ENDIF.

      APPEND WA_FIN TO IT_FIN.
      CLEAR WA_FIN.

    ENDLOOP.


  ENDIF.


  LOOP AT IT_FIN INTO WA_FIN.
    CLEAR GV_TABIX.
    GV_TABIX = SY-TABIX.

    READ TABLE IT_MAKT INTO WA_MAKT WITH KEY MATNR = WA_FIN-MATNR.

    IF SY-SUBRC  = 0 .
      MOVE WA_MAKT-MAKTX TO WA_FIN-MAKTX.

      MODIFY IT_FIN FROM WA_FIN  INDEX GV_TABIX TRANSPORTING MAKTX.
    ENDIF.

    CLEAR : WA_FIN,
             WA_MAKT.
  ENDLOOP.


ENDFORM.                    "SELECT_DATA



*  LOOP AT IT_FIN INTO WA_FIN.
*    WRITE:/1 WA_FIN-EBELN,
*           20 WA_FIN-AEDAT ,
*           40 WA_FIN-ERNAM,
*           60 WA_FIN-EKORG,
*           80 WA_FIN-EBELP,
*           100 WA_FIN-WERKS,
*           120 WA_FIN-NETPR LEFT-JUSTIFIED,                    "FORMATTEED_TEXT LEFT-JUSTIFIED,
*           140 WA_FIN-NETWR LEFT-JUSTIFIED,
*
*           160 WA_FIN-BANFN,
*           180 WA_FIN-MAKTX.
*
*  ENDLOOP.





FORM GET_DATA.

  CLEAR WA_FCAT.
  WA_FCAT-FIELDNAME = 'EBELN'.
  WA_FCAT-SELTEXT_L = 'PURCHASE NO.'.
  WA_FCAT-EMPHASIZE  ='X'.
  WA_FCAT-OUTPUTLEN = 10.
  APPEND WA_FCAT TO IT_FCAT.

  CLEAR WA_FCAT.
  WA_FCAT-FIELDNAME = 'AEDAT'.
  WA_FCAT-SELTEXT_L = 'CREATED ON'.
  WA_FCAT-EMPHASIZE  ='X'.
  WA_FCAT-OUTPUTLEN = 8.
  APPEND WA_FCAT TO IT_FCAT.

  CLEAR WA_FCAT.
  WA_FCAT-FIELDNAME = 'ERNAM'.
  WA_FCAT-SELTEXT_L = 'CREATED BY'.
  WA_FCAT-EMPHASIZE  ='X'.
  WA_FCAT-OUTPUTLEN = 12.
  APPEND WA_FCAT TO IT_FCAT.

  CLEAR WA_FCAT.
  WA_FCAT-FIELDNAME = 'EKORG'.
  WA_FCAT-SELTEXT_L = 'ORGANIZATION'.
  WA_FCAT-EMPHASIZE  ='X'.
  WA_FCAT-OUTPUTLEN = 4.
  APPEND WA_FCAT TO IT_FCAT.

  CLEAR WA_FCAT.
  WA_FCAT-FIELDNAME = 'EBELP'.
  WA_FCAT-SELTEXT_L = 'ITEM NO.'.
  WA_FCAT-EMPHASIZE  ='X'.
  WA_FCAT-OUTPUTLEN = 5.
  WA_FCAT-JUST = 'L'.
  APPEND WA_FCAT TO IT_FCAT.

  CLEAR WA_FCAT.
  WA_FCAT-FIELDNAME = 'MATNR'.
  WA_FCAT-SELTEXT_L = 'MATERIAL NO.'.
  WA_FCAT-EMPHASIZE  ='X'.
  WA_FCAT-OUTPUTLEN = 18.
  APPEND WA_FCAT TO IT_FCAT.

  CLEAR WA_FCAT.
  WA_FCAT-FIELDNAME = 'WERKS'.
  WA_FCAT-SELTEXT_L = 'PLANT'.
  WA_FCAT-EMPHASIZE  ='X'.
  WA_FCAT-OUTPUTLEN = 4.
  APPEND WA_FCAT TO IT_FCAT.

  CLEAR WA_FCAT.
  WA_FCAT-FIELDNAME = 'NETPR'.
  WA_FCAT-SELTEXT_L = 'NET PRIZE'.
  WA_FCAT-EMPHASIZE  ='X'.
  WA_FCAT-OUTPUTLEN = 11.
  WA_FCAT-JUST = 'L'.
  APPEND WA_FCAT TO IT_FCAT.

  CLEAR WA_FCAT.
  WA_FCAT-FIELDNAME = 'NETWR'.
  WA_FCAT-SELTEXT_L = 'NET ORDER'.
  WA_FCAT-EMPHASIZE  ='X'.
  WA_FCAT-OUTPUTLEN = 13.
  WA_FCAT-JUST = 'L'.
  APPEND WA_FCAT TO IT_FCAT.

  CLEAR WA_FCAT.
  WA_FCAT-FIELDNAME = 'BANFN'.
  WA_FCAT-SELTEXT_L = 'REQUISITION NO'.
  WA_FCAT-EMPHASIZE  ='X'.
  WA_FCAT-OUTPUTLEN = 10.
  APPEND WA_FCAT TO IT_FCAT.

  CLEAR WA_FCAT.
  WA_FCAT-FIELDNAME = 'MAKTX'.
  WA_FCAT-SELTEXT_L = 'MATERIAL DESCRIPTION'.
  WA_FCAT-EMPHASIZE  ='X'.
  WA_FCAT-OUTPUTLEN = 40.
  APPEND WA_FCAT TO IT_FCAT.



  GD_LAYOUT-NO_INPUT          = 'X'.
  GD_LAYOUT-COLWIDTH_OPTIMIZE = 'X'.
  GD_LAYOUT-TOTALS_TEXT       = 'Totals'(201).

  GD_LAYOUT-ZEBRA = 'X'.


ENDFORM.                    "GET_DATA



*&---------------------------------------------------------------------*
*&      Form  CALL_FUNCTION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM CALL_FUNCTION.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
   EXPORTING
*       I_INTERFACE_CHECK                 = ' '
*       I_BYPASSING_BUFFER                = ' '
*       I_BUFFER_ACTIVE                   = ' '
     I_CALLBACK_PROGRAM                = SY-REPID
*       I_CALLBACK_PF_STATUS_SET          = ' '
*       I_CALLBACK_USER_COMMAND           = ' '
     I_CALLBACK_TOP_OF_PAGE            = 'TOP_OF_PAGE'
*       I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*       I_CALLBACK_HTML_END_OF_LIST       = ' '
*       I_STRUCTURE_NAME                  =
     I_BACKGROUND_ID                   = 'ALV_BACKGROUND '
     I_GRID_TITLE                      = 'PURCHASE DOCUMENT LIST '
*       I_GRID_SETTINGS                   =
     IS_LAYOUT                         = GD_LAYOUT
     IT_FIELDCAT                       = IT_FCAT[]
*       IT_EXCLUDING                      =
*       IT_SPECIAL_GROUPS                 =
*       IT_SORT                           =
*       IT_FILTER                         =
*       IS_SEL_HIDE                       =
     I_DEFAULT                         = 'X'
*       I_SAVE                            = ' '
*       IS_VARIANT                        =
*       IT_EVENTS                         =
*       IT_EVENT_EXIT                     =
*       IS_PRINT                          =
*       IS_REPREP_ID                      =
*       I_SCREEN_START_COLUMN             = 0
*       I_SCREEN_START_LINE               = 0
*       I_SCREEN_END_COLUMN               = 0
*       I_SCREEN_END_LINE                 = 0
*       I_HTML_HEIGHT_TOP                 = 0
*       I_HTML_HEIGHT_END                 = 0
*       IT_ALV_GRAPHICS                   =
*       IT_HYPERLINK                      =
*       IT_ADD_FIELDCAT                   =
*       IT_EXCEPT_QINFO                   =
*       IR_SALV_FULLSCREEN_ADAPTER        =
*     IMPORTING
*       E_EXIT_CAUSED_BY_CALLER           =
*       ES_EXIT_CAUSED_BY_USER            =
    TABLES
      T_OUTTAB                          = IT_FIN[]
   EXCEPTIONS
     PROGRAM_ERROR                     = 1
     OTHERS                            = 2
            .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.                    "CALL_FUNCTION



*&---------------------------------------------------------------------*
*&      Form  TOP_OF_PAGE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM TOP_OF_PAGE.

  DATA:  IT_HEADER TYPE SLIS_T_LISTHEADER,
         WA_HEADER TYPE SLIS_LISTHEADER.

  WA_HEADER-TYP = 'H'.
  WA_HEADER-INFO = 'PURCHASE ORDER + REQUISITION REPORT'.
  APPEND WA_HEADER TO IT_HEADER.
  CLEAR WA_HEADER.


  DATA: DATE(12) TYPE C.

  WRITE: SY-DATUM TO DATE DD/MM/YYYY.
  WA_HEADER-TYP = 'S'.
  CONCATENATE 'DATE  :'  DATE INTO WA_HEADER-INFO SEPARATED BY SPACE.
  APPEND WA_HEADER TO IT_HEADER.
  CLEAR WA_HEADER.


  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      IT_LIST_COMMENTARY = IT_HEADER[]
      I_LOGO             = 'RALSONLOGO1'.
*   I_END_OF_LIST_GRID       =
*   I_ALV_FORM               =
  .

ENDFORM.                    "TOP_OF_PAGE