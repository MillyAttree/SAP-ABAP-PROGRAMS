*&---------------------------------------------------------------------*
*& Report  Y90_NSR_NEW
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT Y90_NSR_NEW.

TYPE-POOLS:SLIS.

TABLES : VBAK, VBAP, KONP, VEDA, VBEP, A099, VBFA, KONV, LIKP, VBRK, VBRP, VBKD,  KNA1, T005U.

DATA: FIELDCATALOG TYPE SLIS_T_FIELDCAT_ALV WITH HEADER LINE,
      GD_TAB_GROUP TYPE SLIS_T_SP_GROUP_ALV,
      GD_LAYOUT    TYPE SLIS_LAYOUT_ALV,
      GD_REPID     LIKE SY-REPID.

TYPES:BEGIN OF TY_EXCISE,
      VBELN TYPE VBELN,
      POSNR TYPE POSNR,
      EXNUM TYPE J_1IEXCNUM,
      DEPEXNUM TYPE J_1IEXCNUM,
     END OF TY_EXCISE.

DATA IT_EXCISE TYPE TABLE OF TY_EXCISE.
DATA WA_EXCISE TYPE TY_EXCISE.
DATA :IT_VBRP2 TYPE STANDARD TABLE OF VBRP.
DATA : IT_VBRK TYPE STANDARD TABLE OF VBRK.
DATA : WA_VBRK TYPE VBRK.
DATA : IT_VBRP TYPE STANDARD TABLE OF VBRP.
DATA : WA_VBRP TYPE VBRP.
DATA : IT_VBFA TYPE STANDARD TABLE OF VBFA.
DATA : IT_VBFAS TYPE STANDARD TABLE OF VBFA.
DATA : SO_VBFAS TYPE VBFA.
DATA : SO_VBFA TYPE VBFA.
DATA : CT_VBFA TYPE VBFA.
DATA : DL_VBFA TYPE VBFA.
DATA : WA_VBFA TYPE VBFA.
DATA : IT_VBFA_CT TYPE STANDARD TABLE OF VBFA.
DATA : WA_VBFA_CT TYPE VBFA.
DATA : IT_J_1IEXCHDR TYPE STANDARD TABLE OF J_1IEXCHDR.
DATA : WA_J_1IEXCHDR TYPE J_1IEXCHDR.
DATA : IT_VBAK_SO TYPE STANDARD TABLE OF VBAK.
DATA : WA_VBAK_SO TYPE VBAK.
DATA : IT_VBAP_SO TYPE STANDARD TABLE OF VBAP.
DATA : WA_VBAP_SO TYPE VBAP.
DATA : IT_VBAK_CT TYPE STANDARD TABLE OF VBAK.
DATA : WA_VBAK_CT TYPE VBAK.
DATA : IT_VBAP_CT TYPE STANDARD TABLE OF VBAP.
DATA : WA_VBAP_CT TYPE VBAP.
DATA : IT_KONV TYPE STANDARD TABLE OF KONV.
DATA : WA_KONV TYPE KONV.
DATA : IT_KONV_CT TYPE STANDARD TABLE OF KONV.
DATA : WA_KONV_CT TYPE KONV.
DATA : IT_VBKD TYPE STANDARD TABLE OF VBKD.
DATA : WA_VBKD TYPE VBKD.
DATA : IT_VBKD_SO TYPE STANDARD TABLE OF VBKD.
DATA : WA_VBKD_SO TYPE VBKD.
DATA : IT_A099 TYPE STANDARD TABLE OF A099.
DATA : WA_A099 TYPE A099.
DATA : IT_A906 TYPE STANDARD TABLE OF A906.
DATA : WA_A906 TYPE A906.
DATA : IT_LFA1 TYPE STANDARD TABLE OF LFA1.
DATA : WA_LFA1 TYPE LFA1.
DATA : IT_KONP TYPE STANDARD TABLE OF KONP.
DATA : WA_KONP TYPE KONP.
DATA : IT_VBPA TYPE STANDARD TABLE OF VBPA.
DATA : IT_VBPAF TYPE STANDARD TABLE OF VBPA.
DATA : WA_VBPAF TYPE VBPA.
DATA : WA_VBPA TYPE VBPA.
DATA : TR_VBPA TYPE VBPA.
DATA : IT_LIKP TYPE STANDARD TABLE OF LIKP.
DATA : WA_LIKP TYPE LIKP.
DATA : IT_KNVP TYPE STANDARD TABLE OF KNVP WITH HEADER LINE.
DATA : WA_KNVP TYPE KNVP.
DATA : IT_A134 TYPE STANDARD TABLE OF A134 WITH HEADER LINE.
DATA : WA_A134 TYPE A134.
DATA : IN_CUST TYPE STANDARD TABLE OF KNA1 ."WITH HEADER LINE.
DATA : WA_CUST TYPE KNA1.
DATA : CT_CUST TYPE STANDARD TABLE OF KNA1 WITH HEADER LINE.
DATA : SO_MAKT TYPE STANDARD TABLE OF MAKT WITH HEADER LINE.
DATA : CT_MAKT TYPE STANDARD TABLE OF MAKT WITH HEADER LINE.
DATA : DL_KNVV TYPE STANDARD TABLE OF KNVV WITH HEADER LINE.
DATA : V_PEND TYPE VBAP-ZMENG.
DATA : TXT1 TYPE STRING,
       TXT2 TYPE STRING.
DATA LV_R TYPE VBRP-NETWR.
DATA LV_T TYPE VBRP-NETWR.
TYPES : BEGIN OF IT_TAB,
  DL_VBELN TYPE VBRK-VBELN,
  IN_VBELN TYPE VBRK-VBELN,
  IN_DATUM TYPE VBRK-FKDAT,
  IN_XBLNR TYPE VBRK-XBLNR,
  CU_NAME2 TYPE KNA1-NAME1,
  CU_REFNM TYPE VBKD-IHREZ,
  WERKS    TYPE VBRP-WERKS,
  CHARG    TYPE VBRP-CHARG,
  SO_VBELN TYPE VBRK-VBELN,
  CT_VBELN TYPE VBRK-VBELN,
  VTEXT    TYPE DZTERM_BEZ,
  LN_POSNR TYPE VBRP-POSNR,
  BNAME TYPE vbrp-FKIMG,
  IN_MATR TYPE MAKT-MATNR,
  IN_DESC TYPE MAKT-MAKTX,
  IN_WITH TYPE CONF_OUT-ATWRT,
  IN_THIK TYPE CONF_OUT-ATWRT,
  IN_LENT TYPE CONF_OUT-ATWRT,
  IN_SLIT TYPE CONF_OUT-ATWRT,
  IN_TCTP TYPE CONF_OUT-ATWRT,
  QT_FKIMG TYPE VBRP-FKIMG,
  INV_ZR00 TYPE VBRP-NETWR,
  INV_ZA00 TYPE VBRP-NETWR,
  IN_NETWR TYPE VBRP-NETWR,
  IN_FRIET TYPE VBRP-NETWR,
  IN_SALTX TYPE VBRP-NETWR,
  IN_CSTX  TYPE VBRP-NETWR,
  IN_ZTCS  TYPE VBRP-NETWR,
  IN_EXCIS TYPE VBRP-NETWR,
  IN_ROUND TYPE VBRP-NETWR,
  IN_TOTAL TYPE VBRP-NETWR,
  in_city  type vbrp-netwr,
  in_inter type vbrp-netwr,
  in_state type vbrp-netwr,
  in_cess  type vbrp-netwr,
  in_tcs   type vbrp-netwr,
  IN_ZPQD  TYPE VBRP-NETWR,
  IN_ZFQD  TYPE VBRP-NETWR,
  ZPQD     TYPE KONV-KBETR,
  ZFQD     TYPE KONV-KBETR,
  ZFRQ    TYPE VBRP-NETWR,
  TRUK_NO TYPE LIKP-LIFEX,
  AGENT_N TYPE LFA1-LIFNR,
  AGENT_M TYPE LFA1-NAME1,
  COM_RAT TYPE VBRP-NETWR,
  GR_NOBS TYPE XABLN,
  TP_NAME TYPE VEPVG-SPDNR,
  NAME1   TYPE NAME1_GP,
  MEINS TYPE VBRP-MEINS,
  IN_ZENT TYPE VBRP-NETWR,   " Entry tax
  IHREZ_E TYPE VBKD-IHREZ_E,
  CU_NAME1 TYPE VBRK-KUNRG,
  END OF IT_TAB.

DATA : QTY type vbrp-FKIMG,
       VAL type vbrp-NETWR,
       DIS_VAL type vbrp-NETWR,
       DIS type vbrp-NETWR,
       FRE TYPE vbrp-FKIMG,
      ZPQD TYPE KONV-KBETR,
      ZFQD TYPE KONV-KBETR.

TYPES : BEGIN OF TY_FINAL1,
        KUNRG TYPE VBRK-KUNRG,
        NAME1 TYPE KNA1-NAME1,
        BEZEI TYPE T005U-BEZEI,
        FKIMG TYPE VBRP-FKIMG,
        BASIC TYPE p LENGTH 16 DECIMALS 3,
        DISNT TYPE KONV-KWERT,
        BNAME TYPE vbrp-FKIMG,
        NETWR TYPE VBRK-NETWR, " NET VALUE
        NETSALE TYPE VBRK-NETWR, " NET VALUE
        END OF TY_FINAL1.

DATA :  IT_FINAL1  TYPE STANDARD TABLE OF TY_FINAL1,
        WA_FINAL1  TYPE TY_FINAL1.

data: in_city  type vbrp-netwr,
      in_inter type vbrp-netwr,
      in_state type vbrp-netwr.

DATA : NETSALE TYPE VBRK-NETWR. " NET VALUE
DATA IT_TAB TYPE TABLE OF IT_TAB.
DATA WA_TAB TYPE IT_TAB.

DATA : DEL_R_FLO TYPE VBFA-RFMNG_FLO,
       DEL_H_FLO TYPE VBFA-RFMNG_FLO,
       DEL_R TYPE CHAR16,
       DEL_H TYPE CHAR16.
DATA SELTEXT_L  LIKE DD03P-SCRTEXT_L.
DATA LCOUNT TYPE I.

DATA : CONFIGURATION  LIKE  CONF_OUT OCCURS 0 WITH HEADER LINE,
CONFIGURATION_IDOC  LIKE  API_VALUE OCCURS 0 WITH HEADER LINE.

TYPES : BEGIN OF TY_VBAK,
        BNAME TYPE VBAK-BNAME,
        VBELN TYPE VBAK-VBELN,
        END OF TY_VBAK.

DATA : IT_VBAK  TYPE STANDARD TABLE OF TY_VBAK,
       WA_VBAK  TYPE TY_VBAK.

DATA: w_strg  TYPE string,
      w_type  TYPE dd01v-datatype.

FIELD-SYMBOLS: <Ls_row> LIKE LINE OF it_vbak,
               <fs>     TYPE ANY.

SELECTION-SCREEN : BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
SELECT-OPTIONS : V_VBELN FOR VBRK-VBELN.
SELECT-OPTIONS : V_DATE FOR VBRK-FKDAT OBLIGATORY.
SELECT-OPTIONS : V_KUNNR FOR VBRK-KUNRG." NO-EXTENSION NO INTERVALS.
SELECT-OPTIONS : V_SPART FOR VBRK-SPART.
SELECT-OPTIONS : V_VTWEG FOR VBRK-VTWEG.
SELECT-OPTIONS : V_MATNR FOR VBRP-MATNR.
SELECT-OPTIONS : ihrez_e FOR vbkd-ihrez_e.
SELECTION-SCREEN : END OF BLOCK B1.

DATA : TBL_UCOMM TYPE TABLE OF SY-UCOMM,
       V_PFKEY LIKE SY-PFKEY.

INITIALIZATION.

  IF SY-UNAME = 'TKSHARMA'.

  ELSE.

    APPEND 'VDEL' TO tbl_ucomm. "delete variant
    APPEND 'SPOS' TO TBL_UCOMM. "save a variant

    CALL FUNCTION 'RS_SET_SELSCREEN_STATUS'
      EXPORTING
        P_STATUS  = V_PFKEY
        P_PROGRAM = ''
      TABLES
        P_EXCLUDE = TBL_UCOMM.

  ENDIF.

  TYPES: BEGIN OF TY_KNVP,
         KUNN2 TYPE KUNN2,
         END OF TY_KNVP.
  DATA LIT_KNVP TYPE TABLE OF TY_KNVP.

START-OF-SELECTION.

  PERFORM DATA.
  PERFORM DISP.
  PERFORM SUB_ALV_REPORT_DISPLAY.

FORM DATA.
  CLEAR LIT_KNVP[].
  SELECT KUNN2 FROM KNVP INTO TABLE LIT_KNVP WHERE KUNNR IN   V_KUNNR.
  SORT LIT_KNVP .
  DELETE ADJACENT DUPLICATES FROM LIT_KNVP.

  SELECT * INTO TABLE IT_VBRK FROM VBRK
*   INNER JOIN VBRP ON VBRK~VBELN = VBRP~VBELN
    FOR ALL ENTRIES IN LIT_KNVP
    WHERE VBRK~VBELN IN V_VBELN
    AND FKDAT IN V_DATE
    AND ( KUNRG =  LIT_KNVP-KUNN2 OR KUNAG =  LIT_KNVP-KUNN2 )
    AND VBRK~SPART IN V_SPART
    AND VBRK~VTWEG IN V_VTWEG.
*    AND MATNR IN V_MATNR.
  IF IT_VBRK[] IS NOT INITIAL.

    SELECT * INTO TABLE IT_VBFA FROM VBFA FOR ALL ENTRIES IN IT_VBRK WHERE VBELN = IT_VBRK-VBELN.
    SELECT * INTO TABLE IT_VBFAS FROM VBFA FOR ALL ENTRIES IN IT_VBRK WHERE VBELN = IT_VBRK-VBELN AND VBTYP_V = 'C' ."and stufe = '4'..
    SELECT * INTO TABLE IT_VBRP FROM VBRP FOR ALL ENTRIES IN IT_VBRK WHERE VBELN = IT_VBRK-VBELN.
    SELECT * INTO TABLE IT_KONV FROM KONV FOR ALL ENTRIES IN IT_VBRK WHERE KNUMV = IT_VBRK-KNUMV.
    SELECT * INTO TABLE IN_CUST FROM KNA1 FOR ALL ENTRIES IN IT_VBRK WHERE KUNNR = IT_VBRK-KUNRG.

    SELECT KUNNR LIFNR FROM KNVP INTO CORRESPONDING FIELDS OF TABLE IT_KNVP FOR ALL ENTRIES IN IT_VBRK
                                   WHERE KUNNR = IT_VBRK-KUNRG
                                   AND PARVW = 'LF'.

    IT_VBRP2[] = IT_VBRP[].
    SORT IT_VBRP2 BY VGBEL .
    DELETE ADJACENT DUPLICATES FROM IT_VBRP2 COMPARING VGBEL.
    IF NOT IT_VBRP[] IS INITIAL.
     SELECT BNAME VBELN FROM VBAK INTO TABLE IT_VBAK
            FOR ALL ENTRIES IN IT_VBRP2 WHERE VBELN EQ IT_VBRP2-AUBEL.
    ENDIF.

    LOOP AT it_vbak INTO WA_VBAK.
    w_strg = wa_vbak-bname.
    CALL FUNCTION 'NUMERIC_CHECK'
      EXPORTING
        string_in        = w_strg
      IMPORTING
*      STRING_OUT       =
        htype            = w_type.

    IF w_type <> 'NUMC'.
      CLEAR : wa_vbak-bname.
    ENDIF.
    MODIFY it_vbak FROM wa_vbak.
    CLEAR WA_VBAK.
*  ENDDO.
ENDLOOP.
ENDIF.

  IF IT_VBFA[] IS NOT INITIAL.
    SELECT * INTO TABLE IT_VBFA_CT FROM VBFA FOR ALL ENTRIES IN IT_VBFA WHERE VBELN = IT_VBFA-VBELV AND VBTYP_V = 'G' .
    SELECT * INTO TABLE IT_LIKP FROM LIKP FOR ALL ENTRIES IN IT_VBFA WHERE VBELN = IT_VBFA-VBELV.
    SELECT * INTO TABLE IT_VBPA FROM VBPA FOR ALL ENTRIES IN IT_VBFA WHERE VBELN = IT_VBFA-VBELV AND LIFNR NE ''.
    SELECT * INTO TABLE IT_VBKD FROM VBKD FOR ALL ENTRIES IN IT_VBFA WHERE VBELN = IT_VBFA-VBELV.
  ENDIF.
  SELECT * INTO TABLE IT_VBPAF FROM VBPA FOR ALL ENTRIES IN IT_VBRK WHERE VBELN = IT_VBRK-VBELN AND PARVW = 'LF' AND LIFNR NE ''.
  IF IT_VBPA[] IS NOT INITIAL.
    SELECT * INTO TABLE IT_LFA1 FROM LFA1 FOR ALL ENTRIES IN  IT_VBPA WHERE LIFNR =  IT_VBPA-LIFNR.
    SELECT * APPENDING TABLE IT_LFA1 FROM LFA1 FOR ALL ENTRIES IN  IT_VBPAF WHERE LIFNR =  IT_VBPAF-LIFNR.
  ENDIF.
  IF IT_KNVP[] IS NOT INITIAL.
    SELECT KNUMH KSCHL DATAB LIFNR DATAB  FROM A134 INTO CORRESPONDING FIELDS OF TABLE IT_A134
                               FOR ALL ENTRIES IN IT_KNVP
                               WHERE LIFNR = IT_KNVP-LIFNR
                              AND DATAB <= SY-DATUM
                              AND DATBI >= SY-DATUM
                               AND KSCHL = 'ZCOM'.
  ENDIF.
  IF IT_A134[] IS NOT INITIAL.
    SELECT KBETR  KNUMH FROM KONP INTO CORRESPONDING FIELDS OF TABLE IT_KONP
                                  FOR ALL ENTRIES IN IT_A134
                                  WHERE KNUMH = IT_A134-KNUMH.
  ENDIF.
  DATA LV_TAX TYPE KWERT.
  DATA LV_ROUND TYPE KWERT.
  DATA IT_TVZBT TYPE TABLE OF TVZBT.
  DATA WA_TVZBT TYPE TVZBT.

  SELECT * FROM TVZBT INTO TABLE IT_TVZBT WHERE SPRAS = SY-LANGU.
  DELETE IT_VBRP WHERE FKIMG EQ 0.

  SORT IT_VBRP BY VBELN.
  LOOP AT IT_VBRP INTO WA_VBRP ."WHERE FKIMG NE 0.
    CLEAR WA_TVZBT.
    READ TABLE IT_VBFAS INTO SO_VBFAS WITH KEY VBELN = WA_VBRP-VBELN STUFE = '04'.
    IF SY-SUBRC <> 0.
      READ TABLE IT_VBFAS INTO SO_VBFAS WITH KEY VBELN = WA_VBRP-VBELN STUFE = '01'.
      IF SY-SUBRC <> 0.
        READ TABLE IT_VBFAS INTO SO_VBFAS WITH KEY VBELN = WA_VBRP-VBELN .
      ENDIF.
    ENDIF.  "VBTYP_N = 'C'.
    READ TABLE IT_VBFA INTO SO_VBFA WITH KEY VBELN = WA_VBRP-VBELN VBTYP_V = 'C'.
    READ TABLE IT_VBFA_CT INTO CT_VBFA WITH KEY VBELN = SO_VBFA-VBELV POSNN = SO_VBFA-POSNV  VBTYP_V = 'G'.
    READ TABLE IT_VBFA INTO DL_VBFA WITH KEY VBELN = WA_VBRP-VBELN VBTYP_V = 'J'.
    READ TABLE IT_VBRK INTO WA_VBRK WITH KEY VBELN = WA_VBRP-VBELN.
    READ TABLE IT_VBAK INTO WA_VBAK WITH KEY VBELN = WA_VBRP-AUBEL.
    READ TABLE IT_LIKP INTO WA_LIKP WITH KEY VBELN = DL_VBFA-VBELV.
    CLEAR WA_VBPAF.
    READ TABLE IT_VBPAF INTO WA_VBPAF WITH KEY VBELN = WA_VBRP-VBELN.
    READ TABLE IT_VBPA INTO WA_VBPA WITH KEY VBELN = SO_VBFA-VBELV.

    IF SY-SUBRC <> 0.
      READ TABLE IT_VBFA INTO SO_VBFA WITH KEY VBELN = WA_VBRP-VBELN VBTYP_V = 'C' STUFE = '1'.
      READ TABLE IT_VBPA INTO WA_VBPA WITH KEY VBELN = SO_VBFA-VBELV.

    ENDIF.
    CLEAR TR_VBPA.
    READ TABLE IT_VBPA INTO TR_VBPA WITH KEY VBELN = DL_VBFA-VBELV.
    CLEAR WA_LFA1.
    READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR = WA_VBPAF-LIFNR.
    READ TABLE IT_KNVP INTO WA_KNVP WITH KEY KUNNR = WA_VBRK-KUNRG.
    READ TABLE IT_A134 INTO WA_A134 WITH KEY LIFNR = WA_KNVP-LIFNR.
    READ TABLE IT_KONP INTO WA_KONP WITH KEY KNUMH = WA_A134-KNUMH.
    READ TABLE IN_CUST INTO WA_CUST WITH KEY KUNNR = WA_VBRK-KUNRG.
    READ TABLE IT_VBKD INTO WA_VBKD WITH KEY VBELN = SO_VBFA-VBELV.
    READ TABLE IT_TVZBT INTO WA_TVZBT WITH KEY ZTERM = WA_VBRK-ZTERM.

    WA_TAB-DL_VBELN = DL_VBFA-VBELV.
    WA_TAB-IN_VBELN = WA_VBRK-VBELN.
    WA_TAB-IN_DATUM = WA_VBRK-FKDAT.
    WA_TAB-SO_VBELN = SO_VBFAS-VBELV.
    WA_TAB-CT_VBELN = CT_VBFA-VBELV.
    WA_TAB-CU_NAME1 = WA_VBRK-KUNRG.
    WA_TAB-CU_NAME2 = WA_CUST-NAME1.
    WA_TAB-LN_POSNR = WA_VBRP-POSNR.
    WA_TAB-IN_MATR  = WA_VBRP-MATNR.
    WA_TAB-QT_FKIMG = WA_VBRP-FKIMG.
    WA_TAB-MEINS = WA_VBRP-MEINS.
    WA_TAB-VTEXT = WA_TVZBT-VTEXT.
    WA_TAB-IN_NETWR = WA_VBRP-NETWR.
    WA_TAB-WERKS    = WA_VBRP-WERKS.
    WA_TAB-CHARG    = WA_VBRP-CHARG.
    WA_TAB-IN_DESC = WA_VBRP-ARKTX.
    WA_TAB-TRUK_NO = WA_LIKP-LIFEX.
    WA_TAB-GR_NOBS = WA_LIKP-XABLN.
    WA_TAB-AGENT_N = WA_VBPAF-LIFNR.
    WA_TAB-AGENT_M = WA_LFA1-NAME1.
    WA_TAB-COM_RAT = WA_KONP-KBETR.
    WA_TAB-TP_NAME = TR_VBPA-LIFNR.
    at end of AUBEL.
    WA_TAB-BNAME = WA_VBAK-BNAME.
    endat.
    CLEAR : TXT1 , TXT2.
    SPLIT wa_vbrk-xblnr at '/' INTO TXT1 TXT2.
    WA_TAB-IN_XBLNR = TXT1."WA_VBRK-XBLNR.
    SELECT SINGLE NAME1 FROM LFA1 INTO WA_TAB-NAME1  WHERE LIFNR =  TR_VBPA-LIFNR.

    WA_TAB-CU_REFNM = WA_VBKD-IHREZ.
    CLEAR : VBKD.

    DATA L_PQD TYPE KNUMH.
    DATA L_FQD TYPE KNUMH.
    DATA L_FRQ TYPE KNUMH.
    DATA LV_PQD TYPE KBETR.
    DATA LV_FQD TYPE KBETR.
    DATA LV_FRQ TYPE KBETR.
    CLEAR: L_PQD,  L_FQD, LV_PQD, LV_FQD, L_FRQ, LV_FRQ .

    SELECT SINGLE KNUMH FROM A099 INTO L_PQD WHERE KSCHL = 'ZPQD' AND VBELN = CT_VBFA-VBELV  AND POSNR = CT_VBFA-POSNV AND DATBI > SY-DATUM.
    SELECT SINGLE KNUMH FROM A099 INTO L_FQD WHERE KSCHL = 'ZFQD' AND VBELN = CT_VBFA-VBELV  AND POSNR = CT_VBFA-POSNV AND DATBI > SY-DATUM.
    SELECT SINGLE KBETR FROM KONP INTO LV_PQD WHERE KNUMH = L_PQD AND ( KSCHL = 'ZPQD' OR KSCHL = 'ZFQD' ).
    SELECT SINGLE KBETR FROM KONP INTO LV_FQD WHERE KNUMH = L_FQD AND ( KSCHL = 'ZPQD' OR KSCHL = 'ZFQD' ).
    WA_TAB-IN_TOTAL = WA_VBRK-NETWR + LV_TAX.
    CLEAR LV_ROUND.

    LOOP AT IT_KONV INTO WA_KONV WHERE KNUMV = WA_VBRK-KNUMV AND KPOSN = WA_VBRP-POSNR.
      IF WA_KONV-KSCHL = 'ZR00' OR WA_KONV-KSCHL = 'ZSCR' OR WA_KONV-KSCHL = 'ZJBW'.
        WA_TAB-INV_ZR00 = WA_TAB-INV_ZR00 + WA_KONV-KBETR.
      ELSEIF WA_KONV-KSCHL = 'ZFRQ'.
        WA_TAB-ZFRQ = WA_TAB-ZFRQ + WA_KONV-KBETR.
      ENDIF.
      IF CT_VBFA-VBELV IS INITIAL.
      if WA_KONV-KSCHL = 'ZPQD'.
          WA_TAB-ZPQD = ZPQD + WA_KONV-KBETR.
      ELSEIF WA_KONV-KSCHL = 'ZFQD'.
          WA_TAB-ZFQD = ZFQD + WA_KONV-KBETR.
      ENDIF.
      ENDIF.
      CLEAR WA_KONV.
    ENDLOOP.
    WA_TAB-IN_ZPQD =  LV_PQD + LV_FQD + WA_TAB-ZPQD + WA_TAB-ZFQD.

    IF WA_VBRK-VBTYP = 'N' OR WA_VBRK-VBTYP = 'O'.
      WA_TAB-IN_NETWR = WA_TAB-IN_NETWR * -1.
      WA_TAB-IN_TOTAL = WA_TAB-IN_TOTAL * -1.
      WA_TAB-QT_FKIMG = WA_TAB-QT_FKIMG * -1.
    ENDIF.

    IF WA_VBRP-CUOBJ IS NOT INITIAL.

      CALL FUNCTION 'VC_I_GET_CONFIGURATION'
        EXPORTING
          INSTANCE                    = WA_VBRP-CUOBJ
*      BUSINESS_OBJECT             =
*      LANGUAGE                    = SY-LANGU
*      PRINT_SALES                 = ' '
*      PRINT_PURCHASE              = ' '
*      PRINT_ENGINEERING           = ' '
*      IDOC_MODE                   = ' '
*      ANW_SICHT                   = ' '
*      EXCL_IND                    = ' '
*      IV_INVALID_POSSIBLE         = ' '
*      IV_MAX_MASSPROCESSING       = 0
*      IV_EXPLICIT_ORGAREA         = ' '
*      IV_NO_DESCRIPTION           = ' '
*      IV_USER                     = ' '
*      IV_NO_VALUE_CHECK           = 'X'
*      IV_NO_DIALOG                = ' '
*      MILL_SE_RECALC              =
*      MILL_SE_EVAL_DK             =
*    IMPORTING
*      /SAPMP/CONF_RECORD          =
       TABLES
         CONFIGURATION               = CONFIGURATION
         CONFIGURATION_IDOC          = CONFIGURATION_IDOC
*    CHANGING
*      MILL_SE_FATTR               =
*    EXCEPTIONS
*      INSTANCE_NOT_FOUND          = 1
*      INTERNAL_ERROR              = 2
*      NO_CLASS_ALLOCATION         = 3
*      INSTANCE_NOT_VALID          = 4
*      OTHERS                      = 5
                .
      IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

      LOOP AT CONFIGURATION.
        IF CONFIGURATION-ATNAM = 'FG_NW'."'WIDTH'  .
          WA_TAB-IN_WITH = CONFIGURATION-ATWRT.
        ELSEIF  CONFIGURATION-ATNAM = 'FG_NT'."'THICKNESS'.
          WA_TAB-IN_THIK = CONFIGURATION-ATWRT.
        ELSEIF  CONFIGURATION-ATNAM = 'FG_L'."'THICKNESS'.
          WA_TAB-IN_LENT = CONFIGURATION-ATWRT.
        ELSEIF  CONFIGURATION-ATNAM = 'SLT'."'THICKNESS'.
          WA_TAB-IN_SLIT = CONFIGURATION-ATWRT.
        ELSEIF  CONFIGURATION-ATNAM = 'TC_TYPE'."'THICKNESS'.
          WA_TAB-IN_TCTP = CONFIGURATION-ATWRT.
        ENDIF.

      ENDLOOP.
      CLEAR CONFIGURATION[].
    ENDIF.
    LV_R = WA_TAB-IN_ROUND.
    LV_T = WA_TAB-IN_TOTAL.
    CLEAR WA_TAB-IN_ROUND.
    CLEAR WA_TAB-IN_TOTAL.
    AT END OF VBELN.
      WA_TAB-IN_ROUND = LV_R .
      WA_TAB-IN_TOTAL = LV_T .
    ENDAT.
    APPEND WA_TAB TO IT_TAB.
    CLEAR : WA_TAB, CT_VBFA,WA_VBRK,SO_VBFA,DL_VBFA ,WA_VBAK,
     WA_LIKP,WA_VBPA,WA_LFA1,WA_KNVP,WA_A134,WA_KONP,WA_KONV,WA_J_1IEXCHDR,WA_CUST, WA_VBKD,SO_VBFAS.
  ENDLOOP.

  DELETE IT_TAB WHERE IN_MATR NOT IN V_MATNR.
  DELETE it_tab WHERE ihrez_e NOT IN ihrez_e.
  SORT IT_TAB BY CU_NAME1.

  LOOP AT IT_TAB INTO WA_TAB.
  AT NEW CU_NAME1.
  QTY = 0.
  DIS_VAL = 0.
  DIS = 0.
  FRE = 0.
  VAL = 0.
  ENDAT.

  DIS_VAL = WA_TAB-QT_FKIMG * WA_TAB-IN_ZPQD.
  QTY = QTY + WA_TAB-QT_FKIMG.
  VAL = VAL + WA_TAB-IN_NETWR.
  DIS = DIS + WA_TAB-IN_ZPQD.
  FRE = FRE + WA_TAB-ZFRQ * WA_TAB-QT_FKIMG.

  AT END OF CU_NAME1.

 WA_FINAL1-FKIMG = QTY.
 WA_FINAL1-BNAME = FRE.
 WA_FINAL1-basic = VAL.
 WA_FINAL1-DISNT = DIS_VAL.
 WA_FINAL1-KUNRG = WA_TAB-CU_NAME1.
 WA_FINAL1-NAME1 = WA_TAB-CU_NAME2.

 SELECT SINGLE LAND1 REGIO FROM KNA1 INTO (KNA1-LAND1, KNA1-REGIO) WHERE KUNNR = WA_TAB-CU_NAME1.
 SELECT SINGLE BEZEI FROM T005U INTO (T005U-BEZEI) WHERE LAND1 = KNA1-LAND1 AND BLAND = KNA1-REGIO.
 IF SY-SUBRC EQ 0.
 WA_FINAL1-BEZEI = T005U-BEZEI.
 ENDIF.
 COLLECT WA_FINAL1 INTO IT_FINAL1.
 CLEAR WA_FINAL1.
 ENDAT.
 ENDLOOP.

 LOOP AT IT_FINAL1 INTO WA_FINAL1.
 NETSALE = ( WA_FINAL1-basic - wa_final1-bname - WA_FINAL1-DISNT ) / WA_FINAL1-FKIMG.
 WA_FINAL1-NETSALE = NETSALE.
 MODIFY IT_FINAL1 FROM WA_FINAL1 TRANSPORTING NETSALE.
 CLEAR : WA_FINAL1, NETSALE.
 ENDLOOP.

ENDFORM.

FORM DISP.
  FIELDCATALOG-FIELDNAME   = 'KUNRG'.
  FIELDCATALOG-SELTEXT_M   = 'CUSTOMER'.
  FIELDCATALOG-OUTPUTLEN   =  15.
  FIELDCATALOG-NO_ZERO     =  'X'.
  APPEND FIELDCATALOG.
  CLEAR  FIELDCATALOG.

  FIELDCATALOG-FIELDNAME   = 'NAME1'.
  FIELDCATALOG-SELTEXT_M   = 'CUSTOMER NAME'.
  FIELDCATALOG-OUTPUTLEN   =  15.
  FIELDCATALOG-NO_ZERO     =  'X'.
  APPEND FIELDCATALOG.
  CLEAR  FIELDCATALOG.

  FIELDCATALOG-FIELDNAME   = 'BEZEI'.
  FIELDCATALOG-SELTEXT_M   = 'STATE'.
  FIELDCATALOG-OUTPUTLEN   =  15.
  FIELDCATALOG-NO_ZERO     =  'X'.
  APPEND FIELDCATALOG.
  CLEAR  FIELDCATALOG.

  FIELDCATALOG-FIELDNAME   = 'FKIMG'.
  FIELDCATALOG-SELTEXT_M   = 'BILL QTY'.
  FIELDCATALOG-OUTPUTLEN   =  15.
  FIELDCATALOG-NO_ZERO     =  'X'.
  FIELDCATALOG-DO_SUM      =  'X'.
  APPEND FIELDCATALOG.
  CLEAR  FIELDCATALOG.

  FIELDCATALOG-FIELDNAME   = 'BASIC'.
  FIELDCATALOG-SELTEXT_M   = 'BASIC PRICE'.
  FIELDCATALOG-OUTPUTLEN   =  15.
  FIELDCATALOG-NO_ZERO     =  'X'.
  FIELDCATALOG-DO_SUM      =  'X'.
  APPEND FIELDCATALOG.
  CLEAR  FIELDCATALOG.

  FIELDCATALOG-FIELDNAME   = 'BNAME'.
  FIELDCATALOG-SELTEXT_M   = 'FREIGTH'.
  FIELDCATALOG-OUTPUTLEN   =  15.
  FIELDCATALOG-NO_ZERO     =  'X'.
  FIELDCATALOG-DO_SUM      =  'X'.
  APPEND FIELDCATALOG.
  CLEAR  FIELDCATALOG.


  FIELDCATALOG-FIELDNAME   = 'DISNT'.
  FIELDCATALOG-SELTEXT_M   = 'DISOUNT'.
  FIELDCATALOG-OUTPUTLEN   =  15.
  FIELDCATALOG-NO_ZERO     =  'X'.
  FIELDCATALOG-DO_SUM      =  'X'.
  APPEND FIELDCATALOG.
  CLEAR  FIELDCATALOG.

  FIELDCATALOG-FIELDNAME   = 'NETSALE'.
  FIELDCATALOG-SELTEXT_M   = 'NET NSR'.
  FIELDCATALOG-OUTPUTLEN   =  15.
  FIELDCATALOG-NO_ZERO     =  'X'.
  FIELDCATALOG-DO_SUM      =  'X'.
  APPEND FIELDCATALOG.
  CLEAR  FIELDCATALOG.

  GD_LAYOUT-NO_INPUT          = 'X'.
  GD_LAYOUT-COLWIDTH_OPTIMIZE = 'X'.
  GD_LAYOUT-TOTALS_TEXT       = 'TOTALS'(201).
  GD_LAYOUT-ZEBRA             = 'X'.

ENDFORM.

FORM SUB_ALV_REPORT_DISPLAY .

  GD_REPID = SY-REPID.
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
*      I_BACKGROUND_ID        = 'ALV_BACKGROUND'
      I_CALLBACK_PROGRAM     = GD_REPID
*      I_CALLBACK_TOP_OF_PAGE = 'TOP-OF-PAGE'  "SEE FORM
      IS_LAYOUT              = GD_LAYOUT
      IT_FIELDCAT            = FIELDCATALOG[]
*     IT_SORT                = IT_SORTCAT
*     IT_SPECIAL_GROUPS      = GD_TABGROUP
*     IT_EVENTS              = GT_XEVENTS
      I_SAVE                 = 'X'
*     IS_VARIANT             = Z_TEMPLATE
    TABLES
      T_OUTTAB               = IT_FINAL1
    EXCEPTIONS
      PROGRAM_ERROR          = 1
      OTHERS                 = 2.
  IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.                "sub_alv_report_display

